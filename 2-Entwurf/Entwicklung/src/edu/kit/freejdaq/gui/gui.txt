
 @startuml
 
 package "GUI" {
	 MainWindow "1"-- "1" ConfigurationField
	 MainWindow "1"-- "1" PrototypeField
	 
	 PrototypeField <|-- SensorBlockField
	 PrototypeField <|-- TransformationBlockField
	 PrototypeField <|-- RepresentationBlockField
	 ConfigurationField "1" -- "0..*" BuildingBlockView
	 BuildingBlockView <|-up-  SensorBlockView
	 BuildingBlockView <|-up-  TransformationBlockView
	 BuildingBlockView <|-up-  RepresentationBlockView
	 SensorBlockField -- "0..*" SensorBlockView
	 TransformationBlockField -- "0..*" TransformationBlockView
	 RepresentationBlockField -- "0..*" RepresentationBlockView
	 
	 package "Button Layer" {
	 MainWindow "1"-right- "1" ButtonField
	 ButtonField-down- "0..*" Button
	 Button .left.|> ButtonHandler
	 Button <|-up- StartButton
	 Button <|-right- PauseButton
	 Button <|-- ResumeButton
	 Button <|-- ResetButton
	 Button <|-- SaveDataButton
	 Button <|-- SaveRepresentationButton
	 Button <|-- SaveConfiguration
	 Button <|-- LoadConfiguration
	 Button <|-- NewConfiguration
	 Button <|-right- UndoButton
	 Button <|-right- RedoButton
	 }
	 package "Exception Layer" {
	 MainWindow "1" -- ExceptionWindow
	 ExceptionWindow <|-- FatalException
	 ExceptionWindow <|-- ErrorMessage
	 ExceptopnWindow <|-- NoticeMessage
	 }
	 
	 
	 ConfigurationField -up-> BlockDragAndDropHandler
	 BuildingBlockView -down-> "1" HelpDecorator
	 HelpDecorator .down.|> HelpDecoratorHandler 
 
	 class MainWindow <<singleton>> {
	 
		 + static getInstance(): MainWindow
		 +newConfiguration(): void
		 +exit(): void
	 
	 }
 
	 class ConfigurationField {
		 -listOfBuildingBlocks: BuildingBlocks[]
		 +add(block : BuildingBlock): void
		 +remove(block: BuildingBlock): void
		 +getViewModel(): List<BuildingBlockView>
	 }
 
	 class BuildingBlockView {
		 -id: String
		 -name: String
		 -xCor: double
		 -yCor: double
		 -color: String
		 -shape: String
		 +setNumberOfChannels(number : int): void
		 +setCoordinates(x : double, y : double): boolean
		 +getXCoordinate(): int
		 +getYCoordinate(): int
	 }
 
	 interface BlockDragAndDropHandler {
	 	+blockWasMoved(blockId : int, corX : double, corY : double)
	 }

	 interface AddWireDragAndDropHandler {
		+connectionAdded(fromChannelId: int, toChannelId: int)
	 }
 
	 interface RemoveWireDragAndDropHandler {
		+connectionRemoved(fromChannelId: int, toChannelId: int)
	  }
	
	 class PrototypeField {
	 	+open(): void
	 }
 
 together {
	 class SensorBlockField {
	 	+ addSensorBlockView(block: SensorBlockView)
	 }
	 
	 class TransformationBlockField {
	  + addTransformationBlockView(block: TransformationBlockView)
	 }
	 
	 class RepresentationBlockField {
		+ addRepresentationBlockView(block: RepresentationBlockView)
	 }
 }
 
	 class SensorBlockView {
	  	+ addToConnectedOutBlocksViews(blockView: BuildingBlockView)
	 }
	 
	 class TransformationBlockView {
		  + addToConnectedInBlocksViews(blockView: BuildingBlockView)
		  + addToConnectedOutBlocksViews(blockView: BuildingBlockView)
	 }
	
	 class RepresentationBlockView {
	 	+ addToConnectedInBlocksViews(blockView: BuildingBlockView)
	 }

	 class Button {
	 	-label: String
	 	-color: String
	 	+buttonPressed(): void
	 }
	 
	 interface ButtonHandler {
		 +buttonPressed()
	 }
	 
	 
	 interface HelpDecoratorHandler {
		+ decoratorPresssed():void
	 }
	 

	note top of BuildingBlockView 
		Positions of ChannelDecorators and 
		layout of wires in between are not 
		part of ViewModel at this version. 
		Thus those Gui-aspects are considered 
		as implementation details and computed 
		automatically when gui screwed together 
		for now.   
	end note
 
  note left of BlockDragAndDropHandler
		This handler is used for adding 
		and removing of blocks, as well as 
 		for changing position on ConfigurationField. 
  end note 

	 
 
	 SensorBlockView --> "*" OutChannelDecorator 
	 TransformationBlockView --> "*" InChannelDecorator 
	 TransformationBlockView --> "*" OutChannelDecorator 
	 RepresentationBlockView --> "*" InChannelDecorator
	 InChannelDecorator --|> ChannelDecorator
	 OutChannelDecorator --|> ChannelDecorator
	 InChannelDecorator --> Wire
	 OutChannelDecorator --> Wire
	 ChannelDecorator ..|> AddWireDragAndDropHandler
	 Wire ..|> RemoveWireDragAndDropHandler


	 class ChannelDecorator {
		 -id: int
		 -color: String
		 -shape: String
		 +addWireToOtherDecorator(channelId: int)
	 }

	class ViewFacadeController {
		+giveViewModel(): List<BuildingBlockView>
	}
 }

 @enduml

