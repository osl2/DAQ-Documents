@startuml
'----------------------------------------------------------------------------------------
'David
'----------------------------------------------------------------------------------------
abstract class "BuildingBlock" as BB
{

buildingBlockId: Integer
listOfChannels<Channel>
establishConnection(Integer ownSourceChannelId, Integer targetChannelId)
getDataProvider(Integer channelId): DataProvider

}

class "Channel" as C {
type: String
channelId: Integer
connectionPartnerId: Integer
dataProvider: DataProvider

setConnectionPartnerId(String id): boolean

}

note right of C
  first part of channelId is
  the corresponding buildingBlockId
end note




class "ChannelList" as CL {
String: numberOfElements
getChannel(Integer id): Channel
setChannel(Integer id): boolean
addChannel(Channel channel): boolean
removeChannel(id): boolean
}




class "DataProvider" as DP {

dataName: String
dataUnit: String


}

interface "IDataProvider" as IDP {

getDataProvider(Integer channelId): DataProvider

}

note right of IDP
  interface to provide
  Data to a channel
end note

abstract class "BuildingBlock" as BB
{

buildingBlockId: Integer
listOfChannels<Channel>
{abstract} establishConnection(Integer ownSourceChannelId, Integer targetChannelId)
{abstract} getDataProvider(Integer channelId): DataProvider

}

abstract class "Sensor" as AS{
todo
todo()
}

abstract class "Transformation" as AT{
todo
todo()
}


abstract class "Representation" as AR{

state : String

updateInterval : float

xSize: Integer
ySize: Integer

{abstract} saveRepresentationAsFile(Path path):boolean
{abstract} run()
{abstract} stop()
{abstract} resume()
{abstract} reset()
{abstract} delete()

{abstract} setSize(Integer xSize, Integer ySize):boolean
{abstract} establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean

}

BB <|-- AS
BB <|-- AR
BB <|-- AT

CL "1" -- "1" BB
C "1..*"--* "1" CL
C -- IDP
IDP -- DP


'----------------------------------------------------------------------------------------
'Stefan
'----------------------------------------------------------------------------------------
SshAndScpToPi --|> CommunicationWithPi
WebSocketToPi  --|> CommunicationWithPi
UsbToPi --|> CommunicationWithPi
SshAndScpToPi -up-> NetworkConfiguration
WebSocketToPi -up-> NetworkConfiguration

class NetworkConfiguration {
   -port: int
   -ipAddressOfPi: String
}

abstract class CommunicationWithPi {
	-busy: boolean
	-pathToRemoteDir: String
	-pathToLocalDir: String
	+CommunicationWithPi(pathToRemoteDir: String, pathToLocalDir: String, listeningAgent: ICommandResponseListener)
    +{abstract}executeCompleteCommandWithTimeout(command: String, timeOut: int): String[]
    +{abstract}copyFileFromPi(nameOfFile: String): boolean
    +{abstract}copyFileToPi(nameOfFile: String): boolean
    +{abstract}executeCommandContinuously(command: String, listeningAgent: ICommandResponseListener): void
    +{abstract}disconnect(): void
}
CommunicationWithPi --> "listeningProtocolAgent" ICommandResponseListener

interface ICommandResponseListener {
	receivePartOfResponse(response: String; finished: boolean)
}

 SensorInfoProtocolAgentForSsh .up.|> ICommandResponseListener
 MeasurementProcessProtocolAgentForSsh .up.|> ICommandResponseListener

class SshAndScpToPi {
	-username: String
	-password: String
	+SshAndScpTo(username: String, password: String)
	+executeCompleteCommandWithTimeout(command: String, timeOut: int): String[]
    +copyFileFromPi(nameOfFile: String): boolean
    +copyFileToPi(nameOfFile: String): boolean
    +executeCommandContinuously(command: String, listeningAgent: ICommandResponseListener): void
    +disconnect(): void
}

interface IMeasurementStreamListener {
	-receiveData(measuredValue: int): void
	-connectionTerminated(): void
}

MeasurementProcessProtocolAgentForSsh -right-> CommunicationWithPi
SensorInfoProtocolAgentForSsh -up-> CommunicationWithPi
MeasurementProcessProtocolAgentForSsh -left-> "*" IMeasurementStreamListener

interface IAccessToSensorInfo {
	+getIdsOfAvailableSensors(): String[]
	+getYamlFile(sensorId: String): boolean
	+setYamlFile(sensorId: String): boolean
}

SensorInfoProtocolAgentForSsh ..|> IAccessToSensorInfo


interface IAccessToMeasurementProcess{
	+start(sensorIDs: string[], listeners: IMeasurementStreamListener[]): boolean
	+pause(): boolean
	+continue(): boolean
	+stop(): boolean
}

enum MeasurementState {
  INITAL_STATE
  RUNNING
  PAUSED
}

MeasurementProcessProtocolAgentForSsh .down.|> IAccessToMeasurementProcess
MeasurementProcessProtocolAgentForSsh -up-> MeasurementState

together {

	class MeasurementProcessProtocolAgentForSsh {
		+MeasurementProcessProtocolAgentForSsh(foundation: CommunicationWithPi)
		+start(sensorIDs: string[], listeners: IMeasurementStreamListener[]): boolean
		+pause(): boolean
		+continue(): boolean
		+stop(): boolean
		+receivePartOfResponse(response: String; finished: boolean)
	}

	class SensorInfoProtocolAgentForSsh {
		+SensorInfoProtocolAgentForSsh(foundation: CommunicationWithPi)
		+getIdsOfAvailableSensors(): String[]
		+getYamlFile(sensorId: String): boolean
		+setYamlFile(sensorId: String): boolean
		+receivePartOfResponse(response: String; finished: boolean)

	}
}

PickupPointForISensorInfoAndIMeasurementProcess -up-> IAccessToSensorInfo
PickupPointForISensorInfoAndIMeasurementProcess -up-> IAccessToMeasurementProcess
class PickupPointForISensorInfoAndIMeasurementProcess {
	+{static}createPickupPointUsingCommunicationFoundationBySsh(ipAddressOfPi: String, port: int, username: String, password: String, pathToRemoteDir: String, pathToLocalDir: String): PickupPointForISensorInfoAndIMeasurementProcess
	+getIAccessToMeasurementProcess(): IAccessToSensorInfo
	+getIAccessToSensorInfo(): IAccessToSensorInfo
}
'----------------------------------------------------------------------------------------
'Linus
'----------------------------------------------------------------------------------------

'----------------------------------------------------------------------------------------
'Leon
'----------------------------------------------------------------------------------------
'----------------------------------------------------------------------------------------
'All classes used in this UML Diagramm
'----------------------------------------------------------------------------------------
'abstract class Transformation
'class Function
'class MeasurementData
'class Output
'class Input
'class LinearMapping
'class DependendOutputTransformation
'class CustomizedTransformation
'class PredefinedTransformation
'class DataAccesPoint
'----------------------------------------------------------------------------------------
'Class Attributes and methods
'----------------------------------------------------------------------------------------




'----------------------------------------------------------------------------------------
'Class Interactions
'----------------------------------------------------------------------------------------
namespace TransformationLogic {
	abstract class Transformation
	CustomizedTransformation -up-|> Transformation
	PredefinedTransformation -up-|> Transformation
	LinearMapping -up-|> PredefinedTransformation
	DependendOutputTransformation -up-|> PredefinedTransformation
}

abstract class BuildingBlock {
	-id: int
	-name: String
	-listOfChannels: <<Channel>>
	+setId()
	+esttablishConnection(String ownSourceChannelID, String targetChannelID)
	+getDataProvider(String channelID): DataProvider
}
BuildingBlock <|- TransformationLogic.Transformation
'----------------------------------------------------------------------------------------
'Note: The manager aspect of this diagramm can be found, in more detail, at another place.
'It stands here for a complete overview
'----------------------------------------------------------------------------------------
package kit.edu.freejdaq.configurationBlockManager {
	abstract class ConfigurationBlockManager{
		listOfBlocks : ConfigurationBlock[]
		{abstract}+add(cb: ConfigurationBlock): boolean
		+remove(cb: ConfigurationBlock): boolean
		+showAllBocks(cb: ConfigurationBlock): boolean
	}
	ConfigurationBlockManager <|-down- TransformationManager
}

TransformationManager "1" *- "n" TransformationLogic.Transformation
'----------------------------------------------------------------------------------------
'Jan
'----------------------------------------------------------------------------------------
class HelpMessage {
	- messageFileName : String
	+ HelpMessage(msgFile : String)
	+ displayMessage() : void
}

note right of HelpMessage : "messageFileName" leads to [html/markdown/?] \nfile containing message text, \nwhich can be displayed by the application \n(e.g. in swt browser widget)

BuildingBlock "*" --> "1" HelpMessage : < provides help/information about

@enduml
