@startuml
'Date of first creation: 01.07.2019
'------------------------------------------------------------------------
'Backend
'------------------------------------------------------------------------
namespace Backend {
	package edu.kit.freejdaq.backend {
		SshToPi --|> CommunicationWithPi
		WebSocketToPi  --|> CommunicationWithPi
		UsbToPi --|> CommunicationWithPi
		SshToPi -up-> NetworkConfiguration
		WebSocketToPi -up-> NetworkConfiguration

		class NetworkConfiguration {
		   -port: int
		   -ipAddressOfPi: String
		}

		abstract class CommunicationWithPi {
			-busy: boolean
			-pathToRemoteDir: String
			-pathToLocalDir: String
			+CommunicationWithPi(pathToRemoteDir: String, pathToLocalDir: String)
		    +{abstract}executeCompleteCommandWithTimeout(command: String, timeOut: int): String[]
		    +{abstract}copyFileFromPi(nameOfFile: String): boolean
		    +{abstract}copyFileToPi(nameOfFile: String): boolean
		    +{abstract}executeCommandContinuously(command: String, listeningAgent: ICommandResponseListener): void
		    +{abstract}disconnect(): void
		}
		CommunicationWithPi --> "listeningProtocolAgent" ICommandResponseListener

		interface ICommandResponseListener {
			receivePartOfResponse(response: String; finished: boolean)
		}

		 MeasurementRunAgentForSsh .up.|> ICommandResponseListener

		note top of MeasurementRunAgentForSsh
			To separate technical aspect of communication
			from application specific aspect, this Agent
			receives technical events and forwards them to
			its registered application specific clients.
		end note

		class SshToPi {
			-username: String
			-password: String
			+SshAndScpTo(username: String, password: String)
			+executeCompleteCommandWithTimeout(command: String, timeOut: int): String[]
		    +copyFileFromPi(nameOfFile: String): boolean
		    +copyFileToPi(nameOfFile: String): boolean
		    +executeCommandContinuously(command: String, listeningAgent: ICommandResponseListener): void
		    +disconnect(): void
		}

		interface IMeasurementStreamListener {
			-receiveData(measuredValue: int): void
			-connectionTerminated(): void
		}

		MeasurementRunAgentForSsh -right-> CommunicationWithPi
		SensorInfoAgentForSsh -up-> CommunicationWithPi
		MeasurementRunAgentForSsh -left-> "*" IMeasurementStreamListener

		interface IAccessToSensorInfo {
			+getIdsOfAvailableSensors(): String[]
			+getYamlFile(sensorId: String): boolean
			+setYamlFile(sensorId: String): boolean
		}

		SensorInfoAgentForSsh ..|> IAccessToSensorInfo


		interface IAccessToMeasurementRun{
			+start(sensorIDs: string[], listeners: IMeasurementStreamListener[]): boolean
			+pause(): boolean
			+continue(): boolean
			+stop(): boolean
		}

		enum MeasurementState {
		  INITAL_STATE
		  RUNNING
		  PAUSED
		}

		MeasurementRunAgentForSsh .down.|> IAccessToMeasurementRun
		MeasurementRunAgentForSsh -up-> MeasurementState

		together {

			class MeasurementRunAgentForSsh {
				+MeasurementRunAgentForSsh(foundation: CommunicationWithPi)
				+start(sensorIDs: string[], listeners: IMeasurementStreamListener[]): boolean
				+pause(): boolean
				+continue(): boolean
				+stop(): boolean
				+receivePartOfResponse(response: String; finished: boolean)
			}

			class SensorInfoAgentForSsh {
				+SensorInfoAgentForSsh(foundation: CommunicationWithPi)
				+getIdsOfAvailableSensors(): String[]
				+getYamlFile(sensorId: String): boolean
				+setYamlFile(sensorId: String): boolean
			}
		}

		PickupPointForAgentsBasedOnSsh -up-> IAccessToSensorInfo
		PickupPointForAgentsBasedOnSsh -up-> IAccessToMeasurementRun
		class PickupPointForAgentsBasedOnSsh {
			+{static}getPickupPointForAgentsBasedOnSsh(initData: InitDataForSsh): PickupPointForAgentsBasedOnSsh
			+getIAccessToMeasurementRun(): IAccessToSensorInfo
			+getIAccessToSensorInfo(): IAccessToSensorInfo
		}

		PickupPointForAgentsBasedOnSsh ..> InitDataForSsh

		class InitDataForSsh {
		 	+ ipAddressOfPi: String,
		 	+ port: int,
		 	+ username: String,
		 	+ password: String,
		 	+ pathToRemoteDir: String,
		 	+ pathToLocalDir: String
		}
	}

}
'------------------------------------------------------------------------
'Model
'------------------------------------------------------------------------
namespace Model {
	package kit.edu.freejdaq.Model {





	class "MeasurementRun" as MR{

		+start(): boolean
		+pause(): boolean
		+resume(): boolean
		+reset(): boolean
		+setUpdateRate(MeasurementConfiguration config): boolean

	}

	enum MesurementRunState{
		INITIAL_STATE
		RUNNING
		PAUSED
	}
	MR -> MesurementRunState



	class "MeasurementConfiguration" as MC{
		-updateRate: float
		-listOfAllChannels: <Channel>
		-configurationAdjacencyList: configuration[]
	    +addBlock(BuildingBlock block): boolean
	    +removeBlock(Integer blockId): boolean
	    +connectChannels(Integer sourceId, Integer targetId):boolean
		+removeConnection(Integer firstId, Integer secondId): boolean
	    +returnMeasurementConfiguration(): MeasurementConfiguration

	}

	ConnectionManager "1" -- "1" MC

	'----------------------------------------------------------------------------------------
	'PrototypCollection: List of all predefined and custom BuildingBlocks
	'----------------------------------------------------------------------------------------

	class "PrototypCollection" as PC{
		 +returnCloneOfBlock(BuildingBlock: block)
	}


	abstract class "BuildingBlock" as BB
	{

	-id: int
		-name: String
		-listOfChannels: <<Channel>>
		+setId()
		+ {abstract} processValue()
		+ establishConnection(Integer ownSourceChannelId, Integer targetChannelId)


	}



	namespace TransformationLogic {
		abstract class Transformation {
			+<<create>> Transformation()
			+<<create>> Transformation(Yaml inputTransformationYaml)
			+setFunction(String inputFunction)
			+{abstract} applyFunction(): Integer
		}
		class Function {
			<<create>>Function(String inputFunction) : Function
			+applyFunction(Integer data)
		}
		AdditionTransformation -up-|> Transformation
		AverageTransformation -up-|> Transformation
		MultiplicationTransformation -up-|> Transformation
		DataFlowTransformation -up-|> Transformation
		LinearMapping -up-|> DataFlowTransformation
		DependendOutputTransformation -up-|> DataFlowTransformation
		Function "1" - "*" Transformation

		class DataFlowTransformation {

		}
		note left of TransformationLogic.DataFlowTransformation
		Changes the output according to configuration.
		Does not influence the values of the data stream
		end note
	}


	BB <|- TransformationLogic.Transformation
	'----------------------------------------------------------------------------------------
	'Note: The manager aspect of this diagramm can be found, in more detail, at another place.
	'It stands here for a complete overview
	'----------------------------------------------------------------------------------------
	'package kit.edu.freejdaq.configurationBlockManager {
	'	abstract class ConfigurationBlockManager{
	'		listOfBlocks : ConfigurationBlock[]
	'		{abstract}+add(BuildingBlock block): boolean
	'		{abstract}+remove(BuildingBlock block): boolean
	'		{abstract}+showAllBocks(BuildingBlock block): boolean
	'	}
	'
	'	class "RepresentationManager" as RM {
	'
	'
	'	}
	'
	'
	'
	'	ConfigurationBlockManager <|-down- TransformationManager
	'}

	TransformationManager "1" *-down- "n" TransformationLogic.Transformation


	namespace RepresentationLogic {

		abstract class "Representation" as AR{

			{abstract} processValue()


			}

		class "TableRespresentation" as TR {
			processValue()

		}


		class "XYRepresentation" as XYR {
			processValue()



		}

		note right of RepresentationLogic.XYR
	  	use eclipse nebula
	  	for display
		end note


		class "ChannelXvsTime" as XvT {
			processValue()
		}

		class "ChannelXvsChannelY"  as XvY{
			processValue()

		}

			class "NChannelvsTime"  as NvT{
			processValue()
		}
		XYR -up-|> AR
		XvT -up-|> XYR
		XvY -up-|> XYR
		NvT -up-|> XYR
		TR   -down-|> AR


	}

	namespace SensorLogic {

		abstract class "Sensor" as AS{
			´{abstract} processValue()

			}
		 class "AnalogDigitalConverter" as ADC {
			processValue()
		}

		class "ADS1115" as ads1115 {
			processValue()
		}

		ADC -up-|> AS
		ads1115 -up-|> ADC


		class "Current/Power" as CP {
			processValue()
		}

		class "INA219" as ina219 {
			processValue()
		}

		CP -up-|> AS
		ina219 -up-|> CP

		class "SpectralSensor" as SpecSens {
			processValue()
		}

		class "AS7262" as as7262 {
			processValue()
		}

		SpecSens -up-|> AS
		as7262 -up-|> SpecSens

	}


	class "Channel" as C {
		-type: String
		-channelId: Integer
		-connectionPartnerId: Integer
		+processValue()
		+setConnectionPartner(Integer id): boolean

	}


	class "ChannelManager" as CM {
		-numberOfElements: Integer
		+getChannel(Integer id): Channel
		+setChannel(Integer id): boolean
		+addChannel(Channel channel): boolean
		+removeChannel(Integer id): boolean
	}



	interface "IValueHandler" as VH {

		processValue()
	}


	class "HelpMessage" as HM{
		- messageFileName : String
		+ HelpMessage(msgFile : String)
		+ displayMessage() : void
	}
	note right of HM : "messageFileName" leads to [html/markdown/?] \nfile containing message text, \nwhich can be displayed by the application \n(e.g. in swt browser widget)

	BB "*" --> "1" HM : < provides help/information about

	note right of VH
	  interface to provide
	  Data to a channel
	end note


	note top of C
	  first part of channelId is
	  the corresponding buildingBlockId
	end note


	BB <|-- SensorLogic.AS
	BB <|-- RepresentationLogic.AR



	CM "1" -- "1" BB

	C ..|> VH

	CM "1" o-- "1..*" C



	MC "1" -- "*" MR
	PC "1" -- "*" BB
	MC "1" -- "*" BB


	class YamlRepresentation {
		<<create>>YamlRepresentation(BuildingBlock)
	}
	BB -left- YamlRepresentation

	}
	class ModelFacadeView{
			+giveFullModel()
			+update()
		}


	ModelFacadeView -- MC


		class ModelFacadeBackend{
			+receiveYAML(YAML sensorYAML)
			+receiveData(int data)
		}






		class ModelFacadeController{
			+addBuildingBlock(Integer id): BuildingBlock
			+removeBuildingBlock(Integer id): boolean
			+setChannelConnection(int firstChannelId, int secondChannelId)
			+setBuildingBlockName(int iD): boolean
			+startMeasurement()
		}


	ModelFacadeController -- BB
	ModelFacadeController -- MC
	ModelFacadeController -- MR
	ModelFacadeBackend -- VH

	package modelFacade {
		class ModelFacadeView{
			+giveFullModel()
			+update()
		}

		class ModelFacadeBackend{
			+recieveYAML(YAML sensorYAML)
			+recieveData(int data)
		}

		class ModelFacadeController{
			+getBuildingBlock(int iD)
			+setChannelConnection(int firstChannelId, int secondChannelId)
			+setId(int iD)
			+startMeasurement()
		}
	}
}
'------------------------------------------------------------------------
'Controller
'------------------------------------------------------------------------
namespace Controller {
	package edu.kit.freejdaq.controller {

		class CommandManager {
			+ doCommand(cmd : Command) : void
			+ undo() : void
			+ redo() : void
		}

		note top of CommandManager : doCommand(cmd : Command)\n    cmd.execute()\n    doneCommands.push(cmd)\n    undoneCommands.clear()
		note left of CommandManager : undo()\n    cmd = doneCommands.pop()\n    cmd.unExecute()\n    undoneCommands.push(cmd)
		note right of CommandManager : redo()\n    cmd = undoneCommands.pop()\n    cmd.execute()\n    doneCommands.push(cmd)

		CommandManager o-- Command : - doneCommands : Stack

		interface Command {
			+ execute() : void
			+ unExecute() : void
		}

		note right of Command : command parameters (e.g. blockID) are passed with the constructors

		class AddBlockToConfigCommand {
			- blockID : int
		}

		class ModifyBlockInConfigCommand {
			- blockID : int
		}

		class DeleteBlockFromConfigCommand {
			- blockID : int
		}

		class ShowHelpCommand {
			- blockID : int
		}

		class SaveConfigCommand {
			- filePath : String
		}

		class LoadConfigCommand {
			- filePath : String
		}

		class ResetConfigCommand {
		}

		class CreateChannelConnectionCommand {
			- startChannelID : int
			- endChannelID : int
		}

		class ModifyChannelConnectionCommand {
			- oldStartChannelID : int
			- oldEndChannelID : int
			- newStartChannelID : int
			- newEndChannelID : int
		}

		class DeleteChannelConnectionCommand {
			- startChannelID : int
			- endChannelID : int
		}

		class StartRunCommand {
		}

		class StopRunCommand {
		}

		class PauseRunCommand {
		}

		class ResumeRunCommand {
		}

		Command <|.. AddBlockToConfigCommand
		Command <|.. DeleteBlockFromConfigCommand
		Command <|.. ModifyBlockInConfigCommand
		Command <|.. ShowHelpCommand
		Command <|.. SaveConfigCommand
		Command <|.. LoadConfigCommand
		Command <|.. ResetConfigCommand
		Command <|.. CreateChannelConnectionCommand
		Command <|.. ModifyChannelConnectionCommand
		Command <|.. DeleteChannelConnectionCommand
		Command <|.. StartRunCommand
		Command <|.. StopRunCommand
		Command <|.. PauseRunCommand
		Command <|.. ResumeRunCommand

	}
	package "FacadeModelControllerView" {

	 PickUpPointControllerView -up-> IButtonAction
	 PickUpPointControllerView -up-> IBlockAction
	 PickUpPointControllerView -up-> IConnectionAction


	 class PickUpPointControllerView {
	 + {static} getPickUpPointControllerView(data): PickUpPointControllerView
	 + get IButtonAction(): IButtonAction
	 + get IBlockAction(): iBlockAction
	 + get IConnectionAction(): IConnectionAction

	 }

	 interface IButtonAction {

	 + startPressed():
	 + pausePressed():
	 + resumePressed():
	 + resetPressed():
	 + saveDataPressed():
	 + saveRepresentationPressed():
	 + saveConfigurationPressed():
	 + undoPressed():
	 + redoPressed():


	 }

	 interface IBlockAction {

	 + blockPlaced(id: String, xCor: double, yCor: double): boolean
	 + blockMoved(id String, xCor: double, yCor: double): boolean
	 + blockRemoved(id: String): boolean

	 }

	 interface IConnectionAction {

	 + connectionAdded(channelId1: int, channelId2: int): boolean
	 + connectionRemoved(channelId1: int, channelId2: int): void
	 + blockAndChannelsRemoved(id: String): void


	 }
}
}
'------------------------------------------------------------------------
'GUI
'------------------------------------------------------------------------
namespace GUI {
	package "edu.kit.freejdaq.gui" {
		 MainWindow "1"-- "1" ConfigurationField
		 MainWindow "1"-- "1" PrototypeField

		 PrototypeField <|-- SensorBlockField
		 PrototypeField <|-- TransformationBlockField
		 PrototypeField <|-- RepresentationBlockField
		 ConfigurationField "1" -- "*" BuildingBlockView
		 BuildingBlockView <|-up-  SensorBlockView
		 BuildingBlockView <|-up-  TransformationBlockView
		 BuildingBlockView <|-up-  RepresentationBlockView
		 SensorBlockField -- "*" SensorBlockView
		 TransformationBlockField -- "*" TransformationBlockView
		 RepresentationBlockField -- "*" RepresentationBlockView

		 package "Button Layer" {
		 MainWindow "1"-right- "1" ButtonField
		 ButtonField-down- "*" Button
		 Button .left.|> ButtonHandler
		 Button <|-up- StartButton
		 Button <|-right- PauseButton
		 Button <|-- ResumeButton
		 Button <|-- ResetButton
		 Button <|-- SaveDataButton
		 Button <|-- SaveRepresentationButton
		 Button <|-- SaveConfiguration
		 Button <|-- LoadConfiguration
		 Button <|-- NewConfiguration
		 Button <|-right- UndoButton
		 Button <|-right- RedoButton
		 }
		 package "Exception Layer" {
		 MainWindow "1" -left- ExceptionWindow
		 ExceptionWindow <|-- BuildingBlockExceptionWindow
		 ExceptionWindow <|-- ConnectionExceptionWindow
		 ExceptionWindow <|-- GeneralExceptionWindow
		 }


		 ConfigurationField -up-> BlockDragAndDropHandler
		 BuildingBlockView -down-> "1" HelpDecorator
		 HelpDecorator .down.|> HelpDecoratorHandler
		 RepresentationBlockView .down.|> RepresentationBlockViewHandler
		 MainWindow -down-o "1" HelpWindow
		 MainWindow -down-o "1" OptionsWindow

		 class MainWindow <<singleton>> {

		 	- colorScheme: String
		 	- fontSize: int

			 + {static} getInstance(): MainWindow
			 + newConfiguration(): void
			 + exit(): void

		 }

		 class ConfigurationField {
			 -list: List<BuildingBlockView>
			 +add(block : BuildingBlock): void
			 +remove(block: BuildingBlock): void
			 +getViewModel(): List<BuildingBlockView>
		 }

		 class BuildingBlockView {

			 -id: String
			 -buildingBlock: BuildingBlock
			 -name: String
			 -xCor: double
			 -yCor: double
			 -color: String
			 -shape: String
			 +BuildingBlockView(id: String): BuildingBlockView
			 +setNumberOfChannels(number : int): void
			 +setCoordinates(x : double, y : double): boolean
			 +getXCoordinate(): int
			 +getYCoordinate(): int
			 +changeColor(color: String): void
		 }

		 interface BlockDragAndDropHandler {
		 	+blockWasMoved(blockId : String, corX : double, corY : double)
		 }

		 interface AddWireDragAndDropHandler {
			+connectionAdded(fromChannelId: int, toChannelId: int)
		 }

		 interface RemoveWireDragAndDropHandler {
			+connectionRemoved(fromChannelId: int, toChannelId: int)
		  }

		 class PrototypeField {
		 	+open(): void
		 }

	 together {
		 class SensorBlockField {
		 	+ addSensorBlockView(block: SensorBlockView)
		 }

		 class TransformationBlockField {
		  + addTransformationBlockView(block: TransformationBlockView)
		 }

		 class RepresentationBlockField {
			+ addRepresentationBlockView(block: RepresentationBlockView)
		 }
	 }

		 class SensorBlockView {
		  	+ addToConnectedOutBlocksViews(blockView: BuildingBlockView)
		 }

		 class TransformationBlockView {
			  + addToConnectedInBlocksViews(blockView: BuildingBlockView)
			  + addToConnectedOutBlocksViews(blockView: BuildingBlockView)
		 }

		 class RepresentationBlockView {
		 	- unit: String
		 	- maxX: double
		 	- maxY: double
		 	+ addToConnectedInBlocksViews(blockView: BuildingBlockView)
		 	+ getUnit(): String
		 	+ setUnit(unit: String): void
		 	+ getMaxX(): double
		 	+ setMaxX(x: double): void
		 	+ getMaxY(): double
		 	+ setMaxY(y: double): void

		 }

		 interface RepresentationBlockViewHandler {
		  + unitSet(id: String, unit: double): void
		  + maxXSet(id: String, x: double): void
		  + maxYSet(id: String, y: double): void

		 }

		 class Button {
		 	-label: String
		 	-color: String
		 	-image: Image
		 	+buttonPressed(): void
		 }

		 interface ButtonHandler {
			 +buttonPressed()
		 }


		 interface HelpDecoratorHandler {
			+ decoratorPresssed():void
		 }


		note top of BuildingBlockView
			Positions of ChannelDecorators and
			layout of wires in between are not
			part of ViewModel at this version.
			Thus those Gui-aspects are considered
			as implementation details and computed
			automatically when gui screwed together
			for now.
		end note

	  note left of BlockDragAndDropHandler
			This handler is used for adding
			and removing of blocks, as well as
	 		for changing position on ConfigurationField.
	  end note



		 SensorBlockView --> "*" OutChannelDecorator
		 TransformationBlockView --> "*" InChannelDecorator
		 TransformationBlockView --> "*" OutChannelDecorator
		 RepresentationBlockView --> "*" InChannelDecorator
		 InChannelDecorator --|> ChannelDecorator
		 OutChannelDecorator --|> ChannelDecorator
		 InChannelDecorator --> Wire
		 OutChannelDecorator --> Wire
		 ChannelDecorator ..|> AddWireDragAndDropHandler
		 Wire ..|> RemoveWireDragAndDropHandler


		 class ChannelDecorator {
			 -id: int
			 -color: String
			 -shape: String
			 +addWireToOtherDecorator(channelId: int)
		 }

		class Wire {
		-color: String
		+changeColor(color: String): void
		}


		class ExceptionWindow {
		-title: String
		-description: String
		+popUp(): void
		+close(): void
		}

		class BuildingBlockExceptionWindow {
		-id: String
		+popUp(): void
		+changeBlockColor(color: String): void
		}

		class ConnectionExceptionWindow {
		-channelInId: int
		-channelOutId: int
		+popUp(): void
		+changeWireColor(color: String): void
		}

		class GeneralExceptionWindow {
		 +popUp(): void
		}
	 }


	 package "FacadeModelViewController {



	 interface "ViewControllerlnterface" {
	  + getViewModel(): List: <BuildingBlockViews>
	  + setViewModel(list: <BuildingBlockViews>): boolean
	 }
	 }

	 package "FacadeModelViewModel {

	 PickUpPointModelView -up-> ViewModelInterface
	 PickUpPointModelView -up-> DataInterface
	 PickUpPointModelView -up-> ExceptionInterface

	 class PickUpPointModelView {
	 + getDataInterface(): DataInterface
	 + getExceptionInterface(): ExceptionInterface
	 + getViewModelInterface(): ViewModelInterface
	 }

	 interface ViewModelInterface {
	 + update(): void
	 }

	 interface DataInterface {
	 + pushDataForVisualisation(...): void
	 + pushGraphicalVisualisation(...):void
	 }

	 interface ExceptionInterface {
	 + throwFatalException(title: String, description: String): void
	 + throwBuildingBlockException(id: String, title: String, description: String): void
	 + throwConnectionException(id: int, title: String, description: String): void
	 }

	 class OptionsWindow {
	 	+ changeColorScheme(newColorScheme: String): void
	 	+ changeFontSize(newSize: int): void

	 }

	 class HelpWindow {
	 	- description: String
	 	+ openDescription(): void

	 }
	 }



}
'------------------------------------------------------------------------
'FileService
'------------------------------------------------------------------------
namespace FileService {
	class org.yaml.snakeyaml.Yaml {
		load(input : InputStream) : Object
		dump(data : Object, output : Writer) : void
	}

	package edu.kit.freejdaq.fileservice {

		class YamlService {
			+ {static} load(path : String) : Object
			+ {static} save(path : String, data : Object) : void
		}

		YamlService .down.> org.yaml.snakeyaml.Yaml

		class CsvService {
			+ {static} load(path : String) : Object
			+ {static} save(path : String, data : Object) : void
		}

		class ImageService {
			+ {static} load(path : String) : Object
			+ {static} save(path : String, data : Object) : void
		}

	}
}
'------------------------------------------------------------------------
'Directory
'------------------------------------------------------------------------
namespace Directory {
	class BuildingBlockDirectory {

	- map: HashMap<String: id, block: BuildingBlock>

	+ addBuildingBlock(id: String, BuildingBlock): boolean
	+ removeBuildingBlock(id: String): boolean
	+ getBuildingBlock(id: String): BuildingBlock
	+ addConnection(bbId1: String, cId1: int, cId2: int, bbId2: String): boolean
	+ removeConnection(bbId1: String, cId1: int, cId2: int, bbId2: String): boolean
	}
}
'------------------------------------------------------------------------
'Structure adapting Commands
'------------------------------------------------------------------------
Backend -[hidden]down-> Model
Controller -[hidden]up-> Model
@enduml
