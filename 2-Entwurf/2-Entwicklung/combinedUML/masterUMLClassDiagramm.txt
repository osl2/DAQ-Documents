@startuml

'Date of first creation: 01.07.2019
'------------------------------------------------------------------------
'Backend
'------------------------------------------------------------------------
namespace Backend {
	SshToPi --|> CommunicationWithPi
	WebSocketToPi  --|> CommunicationWithPi
	UsbToPi --|> CommunicationWithPi
	SshToPi -up-> NetworkConfiguration
	WebSocketToPi -up-> NetworkConfiguration

	class NetworkConfiguration {
	   -port: int
	   -ipAddressOfPi: String
	}

	abstract class CommunicationWithPi {
		-busy: boolean
		-pathToRemoteDir: String
		-pathToLocalDir: String
		+CommunicationWithPi(pathToRemoteDir: String, pathToLocalDir: String)
	    +{abstract}executeCompleteCommandWithTimeout(command: String, timeOut: int): String[]
	    +{abstract}copyFileFromPi(nameOfFile: String): boolean
	    +{abstract}copyFileToPi(nameOfFile: String): boolean
	    +{abstract}executeCommandContinuously(command: String, listeningAgent: ICommandResponseListener): void
	    +{abstract}disconnect(): void
	}
	CommunicationWithPi --> "listeningProtocolAgent" ICommandResponseListener

	interface ICommandResponseListener {
		receivePartOfResponse(response: String; finished: boolean)
	}

	 MeasurementRunAgentForSsh .up.|> ICommandResponseListener

	note top of MeasurementRunAgentForSsh
		To separate technical aspect of communication
		from application specific aspect, this Agent
		receives technical events and forwards them to
		its registered application specific clients.
	end note

	class SshToPi {
		-username: String
		-password: String
		+SshAndScpTo(username: String, password: String)
		+executeCompleteCommandWithTimeout(command: String, timeOut: int): String[]
	    +copyFileFromPi(nameOfFile: String): boolean
	    +copyFileToPi(nameOfFile: String): boolean
	    +executeCommandContinuously(command: String, listeningAgent: ICommandResponseListener): void
	    +disconnect(): void
	}

	interface IMeasurementStreamListener {
		-receiveData(measuredValue: int): void
		-connectionTerminated(): void
	}

	MeasurementRunAgentForSsh -right-> CommunicationWithPi
	SensorInfoAgentForSsh -up-> CommunicationWithPi
	MeasurementRunAgentForSsh -left-> "*" IMeasurementStreamListener

	interface IAccessToSensorInfo {
		+getIdsOfAvailableSensors(): String[]
		+getYamlFile(sensorId: String): boolean
		+setYamlFile(sensorId: String): boolean
	}

	SensorInfoAgentForSsh ..|> IAccessToSensorInfo


	interface IAccessToMeasurementRun{
		+start(sensorIDs: string[], listeners: IMeasurementStreamListener[]): boolean
		+pause(): boolean
		+continue(): boolean
		+stop(): boolean
	}

	enum MeasurementState {
	  INITAL_STATE
	  RUNNING
	  PAUSED
	}

	MeasurementRunAgentForSsh .down.|> IAccessToMeasurementRun
	MeasurementRunAgentForSsh -up-> MeasurementState

	together {

		class MeasurementRunAgentForSsh {
			+MeasurementRunAgentForSsh(foundation: CommunicationWithPi)
			+start(sensorIDs: string[], listeners: IMeasurementStreamListener[]): boolean
			+pause(): boolean
			+continue(): boolean
			+stop(): boolean
			+receivePartOfResponse(response: String; finished: boolean)
		}

		class SensorInfoAgentForSsh {
			+SensorInfoAgentForSsh(foundation: CommunicationWithPi)
			+getIdsOfAvailableSensors(): String[]
			+getYamlFile(sensorId: String): boolean
			+setYamlFile(sensorId: String): boolean
		}
	}

	PickupPointForAgentsBasedOnSsh -up-> IAccessToSensorInfo
	PickupPointForAgentsBasedOnSsh -up-> IAccessToMeasurementRun
	class PickupPointForAgentsBasedOnSsh {
		+{static}getPickupPointForAgentsBasedOnSsh(initData: InitDataForSsh): PickupPointForAgentsBasedOnSsh
		+getIAccessToMeasurementRun(): IAccessToSensorInfo
		+getIAccessToSensorInfo(): IAccessToSensorInfo
	}

	PickupPointForAgentsBasedOnSsh ..> InitDataForSsh

	class InitDataForSsh {
	 	+ ipAddressOfPi: String,
	 	+ port: int,
	 	+ username: String,
	 	+ password: String,
	 	+ pathToRemoteDir: String,
	 	+ pathToLocalDir: String
	}

	IMeasurementStreamListener <|-- Cache.MRunActivityManagement
}

'------------------------------------------------------------------------
'Model
'------------------------------------------------------------------------
namespace Model {

namespace Core {





	class MeasurementRun {

		+start(): boolean
		+pause(): boolean
		+resume(): boolean
		+reset(): boolean
		+setUpdateRate(MeasurementConfiguration config): boolean

	}

	enum MesurementRunState{
		INITIAL_STATE
		RUNNING
		PAUSED
	}
	MeasurementRun -> MesurementRunState



	class MeasurementConfiguration{
		-pathToFile: String
		-updateRate: float
		-listOfAllChannels: <Channel>
		-configurationAdjacencyList: configuration[]
		+getPathToFile(): String

 		+getMeasurementConfig(): MeasurementConfiguration
 		+addBuildingBlock(id: String)
		+removeBuildingBlock(id: String)
		+addConnection(firstChannelId: String, secondChannelId: String)
		+removeConnection(firstChannelId: String, secondChannelId: String)

 		+createModelFromYamlDom(modelDom: YamlDom): String

	}
	MeasurementConfiguration "1" -- "*" MeasurementRun


	'----------------------------------------------------------------------------------------
	'PrototypCollection: List of all predefined and custom BuildingBlocks
	'----------------------------------------------------------------------------------------

	class PrototypCollection{
		 +clonePrototyp(id: String)
		 +returnCloneOfBlock(BuildingBlock: block)
		 +editPropertyOfPrototyp(key: String, value: Integer)
	}


	abstract class BuildingBlock
	{

		-id: String
		-name: String
		-userInfo: String
		+setId()
		+addInChannel(id: String, name: String): void
		+addOutChannel(id: String, name: String): void
		+removeInChannel(id: String, name: String): void
		+removeOutChannel(id: String, name: String): void



	}


	MeasurementConfiguration "1" -- "*" BuildingBlock

	PrototypCollection "1" -- "*" BuildingBlock


	namespace TransformationLogic {
		abstract class Transformation {
			+<<create>> Transformation()
			+<<create>> Transformation(Yaml inputTransformationYaml)
			+setFunction(String inputFunction)
			+{abstract} applyFunction(): Integer
		}
		class Function {
			<<create>>Function(String inputFunction) : Function
			+applyFunction(Integer data)
		}
		AdditionTransformation -up-|> Transformation
		AverageTransformation -up-|> Transformation
		MultiplicationTransformation -up-|> Transformation
		DataFlowTransformation -up-|> Transformation
		LinearMapping -up-|> DataFlowTransformation
		DependendOutputTransformation -up-|> DataFlowTransformation
		Function "1" - "*" Transformation

		class DataFlowTransformation {

		}
		note left of  DataFlowTransformation
		Changes the output according to configuration.
		Does not influence the values of the data stream
		end note
	}


	BuildingBlock <|-  Model.Core.TransformationLogic.Transformation
	'----------------------------------------------------------------------------------------
	'Note: The manager aspect of this diagramm can be found, in more detail, at another place.
	'It stands here for a complete overview
	'----------------------------------------------------------------------------------------
	'package kit.edu.freejdaq.configurationBlockManager {
	'	abstract class ConfigurationBlockManager{
	'		listOfBlocks : ConfigurationBlock[]
	'		{abstract}+add(BuildingBlock block): boolean
	'		{abstract}+remove(BuildingBlock block): boolean
	'		{abstract}+showAllBocks(BuildingBlock block): boolean
	'	}
	'
	'	class RepresentationManager {
	'
	'
	'	}
	'
	'}

	namespace RepresentationLogic {

		abstract class Representation{

			{abstract} processValue()


			}

		class TableRespresentation {
			processValue()

		}


		class XYRepresentation {
			processValue()
			traceName: String
			title: String
			xAxisName: String
			yXisName: String
			hasToolBar: boolean


		}

		note right of  Model.Core.RepresentationLogic.XYRepresentation
	  		use eclipse nebula
	  		for display
		end note
		XYRepresentation -up-|> Representation
		TableRespresentation   -down-|> Representation


	}
	BuildingBlock <|--  Model.Core.RepresentationLogic.Representation

	namespace SensorLogic {

		abstract class Sensor{
			´{abstract} processValue()

			}

		 class PhysicalSensor{
		 	processValue()
		 }
		 class VirtualSensor{
		 	processValue()
		 }
		 VirtualSensor --|> Sensor
		 PhysicalSensor --|> Sensor
	}
	BuildingBlock <|-- Model.Core.SensorLogic.Sensor


	namespace ChannelLogic {

	class Channel {
		-id: String
		-value: int
		+ establishConnection(String targetChannelId)
		+ receiveValue()
		+ connect(): void
		+ unConnect(): void
		+ receiveValue(): void
		+ eraseValue(): void
		+ {abstract} forwardValue(): void

	}
	Channel ..|> IValueHandler

	note top of Channel
	  first part of channelId is
	  the corresponding buildingBlockId
	end note

	abstract class ChannelState {
		+ {abstract} establishConnection(String targetChannelId)
		+ {abstract} receiveValue()
	}
	Channel --> ChannelState
	note right of ChannelState
	  Schablonenmethode um Unterschiede zwischen
	  In und Out Channeln zu überbrücken
	end note
	class Connected{
		+ establishConnection(String targetChannelId)
		+ receiveValue()
	}
	Connected --|> ChannelState
	class UnConnected{
		+ establishConnection(String targetChannelId)
		+ receiveValue()
	}
	UnConnected --|> ChannelState
	class ValueReady{
		+ establishConnection(String targetChannelId)
		+ receiveValue()
	}
	ValueReady --|> ChannelState
	class InChannel{
		-varName: String
		+forwardValue(): void
	}

	InChannel --|> Channel

	class OutChannel{
		-channelName: String
		+forwardValue(): void
	}

	class MRunInfo {
	+getAllInChannelIds(): String[]
	+getErrorCodes(inChannelId: String): double[]
	+getTimeoutOption(): long
	}



	OutChannel --|> Channel
	OutChannel "1" -- "1" InChannel
	note top of OutChannel
	  forwardValue wird bei
	  receive Value aufgerufen.
	  Hier ausimplementiert.
	end note

	note left of OutChannel
	  channelName steht für Funktionsnamen
	   bei Trafos und für
	   Channelname bei Sensoren
	end note




	interface IValueHandler {

		processValue()
	}

	note right of IValueHandler
	  interface to provide
	  Data to a channel
	end note


	}

	BuildingBlock "1" --> "*" Model.Core.ChannelLogic.InChannel
	BuildingBlock "1" --> "*" Model.Core.ChannelLogic.OutChannel

	class HelpMessage{
		- messageFileName : String
		+ HelpMessage(msgFile : String)
		+ displayMessage() : void
	}
	note right of HelpMessage : "messageFileName" leads to [html/markdown/?] \nfile containing message text, \nwhich can be displayed by the application \n(e.g. in swt browser widget)

	BuildingBlock "*" --> "1" HelpMessage : < provides help/information about




	class YamlRepresentation {
		<<create>>YamlRepresentation(BuildingBlock)
	}
	BuildingBlock -left- YamlRepresentation

	}



'---------------------------------------------------------
'BuildingBlockBuilder
'---------------------------------------------------------
namespace BuildingBlockBuilder {
	class Director {

		+createSensorFromYaml(sensorFile: Yaml): Sensor
		+constructXYRepresentation()
		+constructNTimeRepresentation()
		+constructDS18B20TemperatureSensor()
		+constructBMPx80PressureSensor()
		+constructINA219CurrentAndVoltageSensor()
		+constructMMA8451Accelerometer()



	}

	class Builder {
		-linkToYaml: String
		+{abstract} fetchBuildingBlock(): BuildingBlock
		+snakeYaml.load(): hashMap
	}


	class "java.util.HashMap<K,V>" as HM{


	}

	Builder "1" --> "1" HM


	class SnakeYamlParser {
		+<<static>>parseYamlFile(Yaml fileToBeParsed): hashMap

	}

	note right of SnakeYamlParser
	  Already existing
	  parser for yaml files.
	end note


	SnakeYamlParser "1" --> "1" HM

	class SensorBuilder {
		+fetchBuildingBlock(): BuildingBlock
	}

	class PhysicalSensorBuilder {
		+fetchBuildingBlock(): BuildingBlock
		+addSensorProducerName(yaml Yaml): void

	}

	class VirtualSensorBuilder {
		+fetchBuildingBlock(): BuildingBlock
	}


	class TransformationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	class RepresentationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	class XYRepresentationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	class TableRepresentationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}







	PhysicalSensorBuilder -up-|> SensorBuilder
	VirtualSensorBuilder -up-|> SensorBuilder
	TransformationBuilder -up-|> Builder
	RepresentationBuilder -up-|> Builder
	SensorBuilder -up-|> Builder
	TableRepresentationBuilder -up-|> RepresentationBuilder
	XYRepresentationBuilder -up-|> RepresentationBuilder


	Director "1" --> "0..*" Builder : Staff

}
Model.BuildingBlockBuilder.SensorBuilder ..> Model.Core.SensorLogic.Sensor
Model.BuildingBlockBuilder.TransformationBuilder ..> Model.Core.TransformationLogic.Transformation
Model.BuildingBlockBuilder.RepresentationBuilder ..> Model.Core.RepresentationLogic.Representation
Model.BuildingBlockBuilder.VirtualSensorBuilder ..> Model.Core.SensorLogic.VirtualSensor
Model.BuildingBlockBuilder.PhysicalSensorBuilder ..> Model.Core.SensorLogic.PhysicalSensor
Model.BuildingBlockBuilder.XYRepresentationBuilder ..> Model.Core.RepresentationLogic.XYRepresentation
Model.BuildingBlockBuilder.TableRepresentationBuilder ..> Model.Core.RepresentationLogic.TableRepresentation


interface IMeasurementStreamListener {
		-receiveData(measuredValue: int): void
		-connectionTerminated(): void
	}

Model.Core.MeasurementRun -- IMeasurementStreamListener








	class BuildingBlockDirectory {

		- map: HashMap<String: id, block: BuildingBlock>

		+ initialize():boolean
		+ addBuildingBlock(id: String, BuildingBlock): boolean
		+ removeBuildingBlock(id: String): boolean
		+ getBuildingBlock(id: String): BuildingBlock
		+ addConnection(bbId1: String, cId1: int, cId2: int, bbId2: String): boolean
		+ removeConnection(bbId1: String, cId1: int, cId2: int, bbId2: String): boolean
	}

Model.BuildingBlockDirectory "1" --> "1" Model.BuildingBlockBuilder.Director
Model.Core.MeasurementConfiguration "1" --> "1" Model.BuildingBlockBuilder.Director









class Model.MRunReaction {
	+justWaiting():  void
	+indicateError(inChannelId: String, errorCode: double)
	+indicateTimeout(): void
	+indicateConnectionTerminated(): void
	+dispatchCompletePacketSet(completePacketSet: EnhancedValuePacket[])
}


MRunReaction "1" -- "1" Model.Core.MeasurementRun
Model.Core.MeasurementConfiguration "1" -- "1" Model.Core.ChannelLogic.MRunInfo




}

'------------------------------------------------------------------------
'Controller
'------------------------------------------------------------------------

namespace Controller {

	namespace Controller_Model_Interface {

		interface IModelInformation {
			+ addBuildingBlock(id : String) : boolean
			+ removeBuildingBlock(id : String) : boolean
			+ addConnection(firstChannelId : String, secondChannelId : String) : boolean
			+ removeConnection(firstChannelId : String, secondChannelId : String) : boolean
		}

		interface IMeasurementRun {
			+ start() : boolean
			+ pause() : boolean
			+ resume() : boolean
			+ reset() : boolean
		}

	}

	namespace View_Controller_Interface {

		class ButtonAction < implements IButtonAction > {
			+ startPressed() : boolean
			+ pausePressed() : boolean
			+ resumePressed() : boolean
			+ resetPressed() : boolean
			+ saveDataPressed() : boolean
			+ saveRepresentationPressed() : boolean
			+ saveConfigurationPressed() : boolean
			+ loadConfigurationPressed() : boolean
			+ undoPressed() : void
			+ redoPressed() : void
		}

		class BlockAction < implements IBlockAction > {
		 	+ blockPlaced(id: String, xCor: double, yCor: double): boolean
		 	+ blockMoved(id String, xCor: double, yCor: double): boolean
			+ blockRemoved(id : int) : boolean
		}

		class ConnectionAction < implements IConnectionAction > {
			+ connectionAdded(channelId1 : int, channelId2 : int) : boolean
			+ connectionRemoved(channelId1 : int, channelId2 : int) : void
 			+ blockAndChannelsRemoved(id: String): void
		}

	}

	namespace Command_Pattern {

		AddBlockToConfigCommand <-- Controller.View_Controller_Interface.BlockAction
		ModifyBlockInConfigCommand <-- Controller.View_Controller_Interface.BlockAction
		RemoveBlockFromConfigCommand <-- Controller.View_Controller_Interface.BlockAction
		CreateChannelConnectionCommand <-- Controller.View_Controller_Interface.ConnectionAction
		ModifyChannelConnectionCommand <-- Controller.View_Controller_Interface.ConnectionAction
		DeleteChannelConnectionCommand <-- Controller.View_Controller_Interface.ConnectionAction
		StartRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		PauseRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		ResumeRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		StopRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		SaveConfigCommand <-- Controller.View_Controller_Interface.ButtonAction
		LoadConfigCommand <-- Controller.View_Controller_Interface.ButtonAction
		ResetConfigCommand <-- Controller.View_Controller_Interface.ButtonAction

		CommandManager <-- Controller.View_Controller_Interface.BlockAction
		CommandManager <-- Controller.View_Controller_Interface.ConnectionAction
		CommandManager <-- Controller.View_Controller_Interface.ButtonAction

		Controller.Controller_Model_Interface.IModelInformation <-down- AddBlockToConfigCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- ModifyBlockInConfigCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- RemoveBlockFromConfigCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- CreateChannelConnectionCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- ModifyChannelConnectionCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- DeleteChannelConnectionCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- StartRunCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- PauseRunCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- ResumeRunCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- StopRunCommand



		class CommandManager <<Singleton>> {
			- doneCommands : Stack<Command>
			- undoneCommands : Stack<Command>
			+ doCommand(cmd : Command) : void
			+ undo() : void
			+ redo() : void
		}

		note top of CommandManager : doCommand(cmd : Command)\n    cmd.execute()\n    doneCommands.push(cmd)\n    undoneCommands.clear()
		note left of CommandManager : undo()\n    cmd = doneCommands.pop()\n    cmd.unExecute()\n    undoneCommands.push(cmd)
		note right of CommandManager : redo()\n    cmd = undoneCommands.pop()\n    cmd.execute()\n    doneCommands.push(cmd)

		CommandManager o-- Command

		interface Command {
			+ execute() : void
			+ unExecute() : void
		}

		note right of Command : command parameters (e.g. blockID) are passed with the constructors

		class AddBlockToConfigCommand {
			- blockID : String
			+ execute() : void
			+ unExecute() : void
		}

		class ModifyBlockInConfigCommand {
			- blockID : String
			+ execute() : void
			+ unExecute() : void
		}

		class RemoveBlockFromConfigCommand {
			- blockID : String
			+ execute() : void
			+ unExecute() : void
		}

		class SaveConfigCommand {
			- filePath : String
			+ execute() : void
			+ unExecute() : void
		}

		class LoadConfigCommand {
			- filePath : String
			+ execute() : void
			+ unExecute() : void
		}

		class ResetConfigCommand {
			+ execute() : void
			+ unExecute() : void
		}

		class CreateChannelConnectionCommand {
			- startChannelID : int
			- endChannelID : int
			+ execute() : void
			+ unExecute() : void
		}

		class ModifyChannelConnectionCommand {
			- oldStartChannelID : int
			- oldEndChannelID : int
			- newStartChannelID : int
			- newEndChannelID : int
			+ execute() : void
			+ unExecute() : void
		}

		class DeleteChannelConnectionCommand {
			- startChannelID : int
			- endChannelID : int
			+ execute() : void
			+ unExecute() : void
		}

		class StartRunCommand {
			+ execute() : void
			+ unExecute() : void
		}

		class StopRunCommand {
			+ execute() : void
			+ unExecute() : void
		}

		class PauseRunCommand {
			+ execute() : void
			+ unExecute() : void
		}

		class ResumeRunCommand {
			+ execute() : void
			+ unExecute() : void
		}

		Command <|.. AddBlockToConfigCommand
		Command <|.. RemoveBlockFromConfigCommand
		Command <|.. ModifyBlockInConfigCommand
		Command <|.. SaveConfigCommand
		Command <|.. LoadConfigCommand
		Command <|.. ResetConfigCommand
		Command <|.. CreateChannelConnectionCommand
		Command <|.. ModifyChannelConnectionCommand
		Command <|.. DeleteChannelConnectionCommand
		Command <|.. StartRunCommand
		Command <|.. StopRunCommand
		Command <|.. PauseRunCommand
		Command <|.. ResumeRunCommand

	}

}


'------------------------------------------------------------------------
'GUI
'------------------------------------------------------------------------
namespace GUI {

class MainWindow <<singleton>> {
 - colorScheme: String
 - fontSize: int
 + {static} getInstance(): MainWindow
 + exit(): void
}

namespace Menues {

class PrototypeField {
		- list: <BuildingBlockView>
		+ update(): void
	 	+ open(): void
	 }

	 class SensorBlockField {
	 	+ addSensorBlockView(block: SensorBlockView): void
	 }

	 class TransformationBlockField {
	  	+ addTransformationBlockView(block: TransformationBlockView): void
	 }

	 class RepresentationBlockField {
		+ addRepresentationBlockView(block: RepresentationBlockView): void
	 }


	GUI.MainWindow "1"-- "1" ButtonField
	GUI.MainWindow "1"-- "1" GUI.Menues.PrototypeField
	PrototypeField <|-- SensorBlockField
	PrototypeField <|-- TransformationBlockField
	PrototypeField <|-- RepresentationBlockField

}

namespace Configuration {

	 class ConfigurationField {
		 - list: List<BuildingBlockView>
		 + update(): void
		 + add(block : BuildingBlock): void
		 + remove(block: BuildingBlock): void
		 + open(): void
		 + getViewModel(): List: <BuildingBlockViews>
	 	 + setViewModel(list: <BuildingBlockViews>): boolean
	 	 + getContentsOfRepresentationBlocks():BufferedImage[]
	 }

	 interface BlockDragAndDropHandler {
	 	+blockWasMoved(blockId : String, corX : double, corY : double)
	 }

	note left of BlockDragAndDropHandler
		This handler is used for adding
		and removing of blocks, as well as
 		for changing position on ConfigurationField.
  	end note


	 abstract class BuildingBlockView <<abstract>> {

		 - id: String
		 - buildingBlock: BuildingBlock
		 - name: String
		 - xCor: double
		 - yCor: double
		 - color: String
		 - shape: String
		 + BuildingBlockView(id: String): BuildingBlockView
		 + setNumberOfChannels(number : int): void
		 + setCoordinates(x : double, y : double): boolean
		 + getXCoordinate(): int
		 + getYCoordinate(): int
		 + changeColor(color: String): void
	 }

	 class SensorBlockView {
	  	+ addToConnectedOutBlocksViews(blockView: BuildingBlockView)
	 }

	 class TransformationBlockView {
		  + addToConnectedInBlocksViews(blockView: BuildingBlockView)
		  + addToConnectedOutBlocksViews(blockView: BuildingBlockView)
	 }

	 class RepresentationBlockView {
	 	- unit: String
	 	- maxX: double
	 	- maxY: double
	 	+ addToConnectedInBlocksViews(blockView: BuildingBlockView)
	 	+ getUnit(): String
	 	+ setUnit(unit: String): void
	 	+ getMaxX(): double
	 	+ setMaxX(x: double): void
	 	+ getMaxY(): double
	 	+ setMaxY(y: double): void
	 	+ getContentsOfRepresentationBlocks():BufferedImage

	 }

	 interface HelpDecoratorHandler {
		+ decoratorPresssed():void
	 }

	 interface RepresentationBlockViewHandler {
	  + unitSet(id: String, unit: double): void
	  + maxXSet(id: String, x: double): void
	  + maxYSet(id: String, y: double): void

	 }
	 interface AddWireDragAndDropHandler {
		+connectionAdded(fromChannelId: int, toChannelId: int)
	 }

	interface RemoveWireDragAndDropHandler {
		+connectionRemoved(fromChannelId: int, toChannelId: int)
	 }

	class ChannelDecorator {
		 -id: int
		 -color: String
		 -shape: String
		 +addWireToOtherDecorator(channelId: int): void
	 }

	class OutChannelDecorator{
	}

	class InChannelDecorator{
	}

	class Wire {
		-color: String
		+changeColor(color: String): void
	 }

	 BlockDragAndDropHandler .down.|> ConfigurationField
	 GUI.MainWindow "1"-- "1" ConfigurationField
	 ConfigurationField "1" -- "*" BuildingBlockView
	 BuildingBlockView <|--  SensorBlockView
	 BuildingBlockView <|--  TransformationBlockView
	 BuildingBlockView <|--  RepresentationBlockView
	 RepresentationBlockView .down.|> RepresentationBlockViewHandler
	 BuildingBlockView -right-> "1" HelpDecorator
	 HelpDecorator .up.|> HelpDecoratorHandler

	 InChannelDecorator --|> ChannelDecorator
	 OutChannelDecorator --|> ChannelDecorator
	 InChannelDecorator --> Wire
	 OutChannelDecorator --> Wire
	 ChannelDecorator .down.|> AddWireDragAndDropHandler
	 Wire .down.|> RemoveWireDragAndDropHandler

	 SensorBlockView --> "*" OutChannelDecorator
	 TransformationBlockView --> "*" InChannelDecorator
	 TransformationBlockView --> "*" OutChannelDecorator
	 RepresentationBlockView --> "*" InChannelDecorator

	 GUI.Menues.SensorBlockField -- "*" SensorBlockView
	 GUI.Menues.TransformationBlockField -- "*" TransformationBlockView
	 GUI.Menues.RepresentationBlockField -- "*" RepresentationBlockView

}


namespace Button {

	 abstract class Button {
	 	-label: String
	 	-color: String
	 	-image: Image
	 	+buttonPressed(): void
	 }

	 interface ButtonHandler {
		 +buttonPressed(): void
	 }

	 GUI.Menues.ButtonField -down- "*" Button
	 	Button .up.|> ButtonHandler
	 	Button <|-left- StartButton
	 	Button <|-right- PauseButton
	 	Button <|-left- ResumeButton
	 	Button <|-- ResetButton
	 	Button <|-- SaveDataButton
	 	Button <|-- SaveRepresentationButton
	 	Button <|-- SaveConfiguration
	 	Button <|-- LoadConfiguration
	 	Button <|-- NewConfiguration
	 	Button <|-right- UndoButton
	 	Button <|-right- RedoButton


	}

namespace Exception {


	class ExceptionWindowManager{
		+ showGeneralException(title: String, description: String): void
	 	+ showBuildingBlockException(id: String, title: String, description: String): void
	 	+ showConnectionException(id: int, title: String, description: String): void
	 	+ closeAll(): void
	 }

	abstract class ExceptionWindow {
		-title: String
		-description: String
		+ popUp(): void
		+ close(): void
	}

	class BuildingBlockExceptionWindow {
		- id: String
		+ popUp(): void
		+ changeBlockColor(color: String): void
	}

	class ConnectionExceptionWindow {
		- channelInId: int
		- channelOutId: int
		+ popUp(): void
		+ changeWireColor(color: String): void
	}

	abstract class GeneralExceptionWindow {
	 	+ popUp(): void
	}

	 ExceptionWindowManager --> "*" ExceptionWindow
	 GUI.MainWindow "1" -- ExceptionWindow
	 ExceptionWindow <|-- BuildingBlockExceptionWindow
	 ExceptionWindow <|-- ConnectionExceptionWindow
	 ExceptionWindow <|-- GeneralExceptionWindow
}

namespace HelpAndOption {

 class OptionsWindow {
 	+ changeColorScheme(newColorScheme: String): void
 	+ changeFontSize(newSize: int): void
}

 class HelpWindow {
 	- description: String
 	+ openDescription(): void

 }
	 GUI.MainWindow -down-o "1" HelpWindow
	 GUI.MainWindow -down-o "1" OptionsWindow

}

 namespace FacadeControllerView {

 class PickUpPointControllerView {
	 + get IButtonAction(): IButtonAction
	 + get IBlockAction(): iBlockAction
	 + get IConnectionAction(): IConnectionAction
 	}

 interface IButtonAction {
 	+ startPressed(): boolean
 	+ pausePressed(): boolean
	+ resumePressed(): boolean
 	+ resetPressed(): boolean
 	+ saveDataPressed(): boolean
 	+ saveRepresentationPressed(): boolean
 	+ saveConfigurationPressed(): boolean
 	+ undoPressed(): void
 	+ redoPressed(): void
	}

 interface IBlockAction {
 	+ blockPlaced(id: String, xCor: double, yCor: double): boolean
 	+ blockMoved(id String, xCor: double, yCor: double): boolean
 	+ blockRemoved(id: String): boolean
	}

 interface IConnectionAction {

 	+ connectionAdded(channelId1: int, channelId2: int): boolean
 	+ connectionRemoved(channelId1: int, channelId2: int): void
 	+ blockAndChannelsRemoved(id: String): void
	}

 		PickUpPointControllerView -up-> IButtonAction
 		PickUpPointControllerView -up-> IBlockAction
 		PickUpPointControllerView -up-> IConnectionAction

 	PickUpPointControllerView -- GUI.Button.ButtonHandler
 	PickUpPointControllerView -- GUI.Configuration.BlockDragAndDropHandler
 	PickUpPointControllerView -- GUI.Configuration.AddWireDragAndDropHandler
 	PickUpPointControllerView -- GUI.Configuration.RemoveWireDragAndDropHandler

	}

namespace FacadeModelView {

	interface ViewModelInterface {
	+getViewModel(): <BuildingBlock>
	}

	interface ViewDirectoryInterfacae {
	+getBuildingBlock(id: String): BuildingBlock
	+getConnection(id: int): BuildingBlock
	}

	ViewModelInterface -down- GUI.Configuration.ConfigurationField
	ViewDirectoryInterfacae -- GUI.Configuration.ConfigurationField
}

}

'------------------------------------------------------------------------
'FileService
'------------------------------------------------------------------------
namespace FileService {

	class org.yaml.snakeyaml.Yaml {
		load(input : InputStream) : Object
		dump(data : Object, output : Writer) : void
	}

	class YamlService {
		+ {static} load(path : String) : Object
		+ {static} save(path : String, data : Object) : void
	}

	note bottom of YamlService : for sensors, transformations, configs (?)

	YamlService .up.> org.yaml.snakeyaml.Yaml

	class CsvService {
		+ {static} load(path : String) : Object
		+ {static} save(path : String, data : Object) : void
	}

	note bottom of CsvService : for measurement results (tables)

	class PngService {
		+ {static} save(path : String, data : Object) : void
	}

	note bottom of PngService : for representation graphs

}
'------------------------------------------------------------------------
'Directory
'------------------------------------------------------------------------
namespace Directory {
	class BuildingBlockDirectory {

		- InitHashMap: HashMap<String: id, block: BuildingBlock>
		- ConfigHashMap: HashMap<int: id, block: BuildingBlock>
		--
		+ addInitBuildingBlock(id: String, block: BuildingBlock): boolean
		..
		+ addConfigBuildingBlock(id: int, block: BuildingBlock): boolean
		+ removeConfigBuildingBlock(id: String): boolean
		+ getInitBuildingBlock(id: String): BuildingBlock
		+ getConfigBuildingBlock(id: int): BuildingBlock
		+ addConfigConnection(bbId1: String, cId1: int, cId2: int, bbId2: String): boolean
		+ removeConfigConnection(bbId1: String, cId1: int, cId2: int, bbId2: String): boolean
		}
}

'------------------------------------------------------------------------
'Cache
'------------------------------------------------------------------------

namespace Cache {
class MRunActivityManagement {
	+ MRunActivityManagement(initData: MRunInfo, listenerAtModel: MRunForward )
	- addBufferForOneSensorInChannel(SensorId: String)
	- addTrigger(trigger: Trigger): void
	..
	+ run(): void
	- setCurrentTime(): void
	- checkTriggers(): void
	..
	+ startRepeatedTimer(): void
	+ stopRepeatedTimer(): void
	..
	+ receiveMDataSet(channelId: String, timeStamp: long, value: double): void
	+ connectionTerminated(): void


}

class Timer {
	-period: long
	+schedule(timerTask: TimerTask, period: long)
	+cancel(): void
}

class Cache{
	+ addBufferForOneSensorInChannel(SensorId: String)
	+ addPacket(timeStamp: long, value: double, inChannelId: String)
	+ isCompletePackageSetAvailable(from: long, to: long): boolean
	+ pollCompletePackageSet(from: long, to: long):  IdValuePair[]
}

class BufferForOneSensorInChannel {
	-sensorInChannelId: Stirng
	-buffer: Queue<SimpleValuePacket>

	+getInChannelId(): String
	+addPacket(timeStamp: long, value: double)
	+getAllPacketsDuringTimespan(from: long, to: long): double[]
}

class SimpleValuePacket	{
	-value: double
	-timeStamp: long
	+SimpleValuePacket(value: double, timeStamp: long)
	+getValue(): double
	+getTimeSpamp(): long
}

class ConnectionTerminatedTrigger {
	+checkAndNotifyMRunManagement(mRunForward: MRunForward)
}

class TimeoutTrigger {
	+checkAndNotifyMRunManagement(mRunForward: MRunForward)
}

class ErrorCodeTrigger {
	+checkAndNotifyMRunManagement(mRunForward: MRunForward)
}

class BufferForOneSensorInChannel {
	BufferForOneSensorInChannel
	+checkAndNotifyMRunManagement(mRunForward: MRunForward)
}

ConnectionTerminatedTrigger .up.|> Trigger
TimeoutTrigger .up.|> Trigger
ErrorCodeTrigger .up.|> Trigger
DataSetCompleteTrigger .up.|> Trigger

MRunActivityManagement ..|> TimerTask
Timer --> "1" TimerTask
MRunActivityManagement --> Cache
Cache --> "*" BufferForOneSensorInChannel
BufferForOneSensorInChannel ..> SimpleValuePacket
MRunActivityManagement --> "*" Trigger

DataSetCompleteTrigger --> "*" BufferForOneSensorInChannel

interface Trigger {
	+checkAndNotifyMRunManagement(mRunForward: MRunForward)
}

interface MRunForward {
	+justWaiting():  void
	+indicateError(inChannelId: String, errorCode: double)
	+indicateTimeout(): void
	+indicateConnectionTerminated(): void
	+dispatchCompletePacketSet(completePacketSet: EnhancedValuePacket[])
}

interface MRunInfo {
	+getAllInChannelIds(): String[]
	+getErrorCodes(inChannelId: String): double[]
	+getTimeoutOption(): long
}

interface TimerTask {
	+run(): void
}

IMRunListener <|.. Model.MRunReaction
IMRunInfo <|.. Model.ChannelLogic.MRunInfo
}

'------------------------------------------------------------------------
'Global Lines
'------------------------------------------------------------------------

'Model to Cache

Cache.IMRunListener <|.. Model.MRunReaction
Cache.IMRunInfo <|.. Model.ChannelLogic.MRunInfo

'Model to Controller

Controller.Controller_Model_Interface.IModelInformation <|.. Model.Core.MeasurementConfiguration
Controller.Controller_Model_Interface.IMeasurementRun <|.. Model.Core.MeasurementRun

'Controller to GUI

GUI.IButtonAction <|.. Controller.Command_Pattern.View_Controller_Interface.ButtonAction
GUI.IBlockAction <|.. Controller.Command_Pattern.View_Controller_Interface.BlockAction
GUI.IConnectionAction <|.. Controller.Command_Pattern.View_Controller_Interface.ConnectionAction

'Model to GUI

ViewModelInterface ..|> Model.Core.MeasurementConfiguration
ViewDirectoryInterface --|> Model.BuildingBlockDirectory

'Cache to Backend

Cache.IMeasurementStreamListener <|-- Cache.MRunActivityManagement

'------------------------------------------------------------------------
'Structure adapting Commands
'------------------------------------------------------------------------
class hider{

}
hide hider

Backend --------[hidden]up------------> hider
Model --------[hidden]up-------> Backend
Controller -------[hidden]up-------> Model
GUI -------[hidden]up-------> Controller

@enduml
