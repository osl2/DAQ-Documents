@startuml

skinparam defaultFontSize 22

namespace Controller {

	namespace Controller_Model_Interface {
	
		interface IModelInformation {
			+ addBuildingBlock(id : String) : boolean
			+ removeBuildingBlock(id : String) : boolean
			+ addConnection(firstChannelId : String, secondChannelId : String) : boolean
			+ removeConnection(firstChannelId : String, secondChannelId : String) : boolean
			+ saveConfig(path : String) : boolean
			+ loadConfig(path : String) : boolean
		}
		
		interface IMeasurementRun {
			+ start() : boolean
			+ pause() : boolean
			+ resume() : boolean
			+ reset() : boolean
		}
	
	}
	
	namespace View_Controller_Interface {
	
		class ButtonAction < implements IButtonAction > {
			+ startPressed() : boolean
			+ pausePressed() : boolean
			+ resumePressed() : boolean
			+ resetPressed() : boolean
			+ saveDataPressed() : boolean
			+ saveRepresentationPressed() : boolean
			+ saveConfigurationPressed() : boolean
			+ loadConfigurationPressed() : boolean
			+ undoPressed() : void
			+ redoPressed() : void
		}
	
		class BlockAction < implements IBlockAction > {
		 	+ blockPlaced(initId: String, xCor: double, yCor: double): boolean
		 	+ blockMoved(configId int, xCor: double, yCor: double): boolean
			+ blockRemoved(configId : int) : boolean
		 	+ editBuildingBlockProperties(configId : int, properties : BuildingBlockProperties) : boolean
		 	+ cloneBuildingBlock(configId : int) : boolean
		 	+ exportPrototype(configId : int) : boolean
		}
	
		class ConnectionAction < implements IConnectionAction > {
			+ connectionAdded(channelId1 : int, channelId2 : int) : boolean
			+ connectionRemoved(channelId1 : int, channelId2 : int) : void
 			+ blockAndChannelsRemoved(configId: int): void
		}
	
	}

	namespace Command_Pattern {
	
		AddBlockToConfigCommand <-- Controller.View_Controller_Interface.BlockAction
	'	ModifyBlockInConfigCommand <-- Controller.View_Controller_Interface.BlockAction
		RemoveBlockFromConfigCommand <-- Controller.View_Controller_Interface.BlockAction
		EditBlockPropertiesCommand <-- Controller.View_Controller_Interface.BlockAction
		CloneBlockCommand <-- Controller.View_Controller_Interface.BlockAction
		ExportBlockPrototypeCommand <-- Controller.View_Controller_Interface.BlockAction
		CreateChannelConnectionCommand <-- Controller.View_Controller_Interface.ConnectionAction
		ModifyChannelConnectionCommand <-- Controller.View_Controller_Interface.ConnectionAction
		DeleteChannelConnectionCommand <-- Controller.View_Controller_Interface.ConnectionAction
		StartRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		PauseRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		ResumeRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		StopRunCommand <-- Controller.View_Controller_Interface.ButtonAction
		SaveConfigCommand <-- Controller.View_Controller_Interface.ButtonAction
		LoadConfigCommand <-- Controller.View_Controller_Interface.ButtonAction
		
		CommandManager <-- Controller.View_Controller_Interface.BlockAction
		CommandManager <-- Controller.View_Controller_Interface.ConnectionAction
		CommandManager <-- Controller.View_Controller_Interface.ButtonAction
		
		Controller.Controller_Model_Interface.IModelInformation <-down- AddBlockToConfigCommand
	'	Controller.Controller_Model_Interface.IModelInformation <-down- ModifyBlockInConfigCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- RemoveBlockFromConfigCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- EditBlockPropertiesCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- CloneBlockCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- ExportBlockPrototypeCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- CreateChannelConnectionCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- ModifyChannelConnectionCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- DeleteChannelConnectionCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- SaveConfigCommand
		Controller.Controller_Model_Interface.IModelInformation <-down- LoadConfigCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- StartRunCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- PauseRunCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- ResumeRunCommand
		Controller.Controller_Model_Interface.IMeasurementRun <-down- StopRunCommand
		
		

		class CommandManager <<Singleton>> {
			- doneCommands : Stack<Command>
			- undoneCommands : Stack<Command>
			+ doCommand(cmd : Command) : void
			+ undo() : void
			+ redo() : void
		}
		
		note top of CommandManager : doCommand(cmd : Command)\n    cmd.execute()\n    if (cmd.isUndoable()())\n        doneCommands.push(cmd)\n    undoneCommands.clear()
		note left of CommandManager : undo()\n    cmd = doneCommands.pop()\n    cmd.unExecute()\n    undoneCommands.push(cmd)
		note right of CommandManager : redo()\n    cmd = undoneCommands.pop()\n    cmd.execute()\n    doneCommands.push(cmd)
		
		CommandManager o-- Command
	
		interface Command {
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		note right of Command : command parameters (e.g. blockID) are passed with the constructors
		
		class AddBlockToConfigCommand {
			- blockID : String
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
	'	class ModifyBlockInConfigCommand {
	'		- blockID : String
	'		+ execute() : void
	'		+ unExecute() : void
	'		+ isUndoable() : boolean
	'	}
		
		class RemoveBlockFromConfigCommand {
			- blockID : int
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class EditBlockPropertiesCommand {
			- blockID : int
			- properties : BuildingBlockProperties
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class CloneBlockCommand {
			- blockID : int
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class ExportBlockPrototypeCommand {
			- blockID : int
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class SaveConfigCommand {
			- filePath : String
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class LoadConfigCommand {
			- filePath : String
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class ResetConfigCommand {
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class CreateChannelConnectionCommand {
			- startChannelID : int
			- endChannelID : int
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class ModifyChannelConnectionCommand {
			- oldStartChannelID : int
			- oldEndChannelID : int
			- newStartChannelID : int
			- newEndChannelID : int
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class DeleteChannelConnectionCommand {
			- startChannelID : int
			- endChannelID : int
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class StartRunCommand {
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class StopRunCommand {
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class PauseRunCommand {
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		class ResumeRunCommand {
			+ execute() : void
			+ unExecute() : void
			+ isUndoable() : boolean
		}
		
		Command <|.. AddBlockToConfigCommand
		Command <|.. RemoveBlockFromConfigCommand
	'	Command <|.. ModifyBlockInConfigCommand
		Command <|.. EditBlockPropertiesCommand
		Command <|.. CloneBlockCommand
		Command <|.. ExportBlockPrototypeCommand
		Command <|.. SaveConfigCommand
		Command <|.. LoadConfigCommand
		Command <|.. ResetConfigCommand
		Command <|.. CreateChannelConnectionCommand
		Command <|.. ModifyChannelConnectionCommand
		Command <|.. DeleteChannelConnectionCommand
		Command <|.. StartRunCommand
		Command <|.. StopRunCommand
		Command <|.. PauseRunCommand
		Command <|.. ResumeRunCommand

	}

}


@enduml