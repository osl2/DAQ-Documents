@startuml


namespace GUI {

class MainWindow <<singleton>> {
 - colorScheme: String
 - fontSize: int
 + {static} getInstance(): MainWindow
 + newConfiguration(): void
 + exit(): void
}

namespace Menues {

class PrototypeField {
	 	+open(): void
	 }
	 
	 class SensorBlockField {
	 	+ addSensorBlockView(block: SensorBlockView)
	 }

	 class TransformationBlockField {
	  + addTransformationBlockView(block: TransformationBlockView)
	 }

	 class RepresentationBlockField {
		+ addRepresentationBlockView(block: RepresentationBlockView)
	 }
	
	
	GUI.MainWindow "1"-- "1" ButtonField
	GUI.MainWindow "1"-- "1" GUI.Menues.PrototypeField
	PrototypeField <|-- SensorBlockField
	PrototypeField <|-- TransformationBlockField
	PrototypeField <|-- RepresentationBlockField

}

namespace Configuration {

	 class ConfigurationField {
		 -list: List<BuildingBlockView>
		 +add(block : BuildingBlock): void
		 +remove(block: BuildingBlock): void
		 +getViewModel(): List<BuildingBlockView>
	 }
	 
	 interface BlockDragAndDropHandler {
	 	+blockWasMoved(blockId : String, corX : double, corY : double)
	 }
	 
	 note left of BlockDragAndDropHandler
		This handler is used for adding
		and removing of blocks, as well as
 		for changing position on ConfigurationField.
  	end note
  	

	 class BuildingBlockView {

		 -id: String
		 -buildingBlock: BuildingBlock
		 -name: String
		 -xCor: double
		 -yCor: double
		 -color: String
		 -shape: String
		 +BuildingBlockView(id: String): BuildingBlockView
		 +setNumberOfChannels(number : int): void
		 +setCoordinates(x : double, y : double): boolean
		 +getXCoordinate(): int
		 +getYCoordinate(): int
		 +changeColor(color: String): void
	 }
	 
	 class SensorBlockView {
	  	+ addToConnectedOutBlocksViews(blockView: BuildingBlockView)
	 }

	 class TransformationBlockView {
		  + addToConnectedInBlocksViews(blockView: BuildingBlockView)
		  + addToConnectedOutBlocksViews(blockView: BuildingBlockView)
	 }

	 class RepresentationBlockView {
	 	- unit: String
	 	- maxX: double
	 	- maxY: double
	 	+ addToConnectedInBlocksViews(blockView: BuildingBlockView)
	 	+ getUnit(): String
	 	+ setUnit(unit: String): void
	 	+ getMaxX(): double
	 	+ setMaxX(x: double): void
	 	+ getMaxY(): double
	 	+ setMaxY(y: double): void

	 }
	 
	 interface HelpDecoratorHandler {
		+ decoratorPresssed():void
	 }

	 interface RepresentationBlockViewHandler {
	  + unitSet(id: String, unit: double): void
	  + maxXSet(id: String, x: double): void
	  + maxYSet(id: String, y: double): void

	 }
	 interface AddWireDragAndDropHandler {
		+connectionAdded(fromChannelId: int, toChannelId: int)
	 }

	interface RemoveWireDragAndDropHandler {
		+connectionRemoved(fromChannelId: int, toChannelId: int)
	 }
	  
	class ChannelDecorator {
		 -id: int
		 -color: String
		 -shape: String
		 +addWireToOtherDecorator(channelId: int)
	 }
	 
	class OutChannelDecorator{
	}
	
	class InChannelDecorator{
	}

	class Wire {
		-color: String
		+changeColor(color: String): void
	 }
	 
 
	 
	 
	 
	 
	 ConfigurationField -up-> BlockDragAndDropHandler
	 GUI.MainWindow "1"-- "1" ConfigurationField
	 ConfigurationField "1" -- "*" BuildingBlockView
	 BuildingBlockView <|--  SensorBlockView
	 BuildingBlockView <|--  TransformationBlockView
	 BuildingBlockView <|--  RepresentationBlockView
	 RepresentationBlockView .down.|> RepresentationBlockViewHandler
	 BuildingBlockView -right-> "1" HelpDecorator
	 HelpDecorator .up.|> HelpDecoratorHandler
	 	 
	 InChannelDecorator --|> ChannelDecorator
	 OutChannelDecorator --|> ChannelDecorator
	 InChannelDecorator --> Wire
	 OutChannelDecorator --> Wire
	 ChannelDecorator .down.|> AddWireDragAndDropHandler
	 Wire .down.|> RemoveWireDragAndDropHandler
	 
	 SensorBlockView --> "*" OutChannelDecorator
	 TransformationBlockView --> "*" InChannelDecorator
	 TransformationBlockView --> "*" OutChannelDecorator
	 RepresentationBlockView --> "*" InChannelDecorator
	 
	 GUI.Menues.SensorBlockField -- "*" SensorBlockView
	 GUI.Menues.TransformationBlockField -- "*" TransformationBlockView
	 GUI.Menues.RepresentationBlockField -- "*" RepresentationBlockView
	 
}


namespace Button {

	 class Button {
	 	-label: String
	 	-color: String
	 	-image: Image
	 	+buttonPressed(): void
	 }

	 interface ButtonHandler {
		 +buttonPressed()
	 }
	 
	 GUI.Menues.ButtonField -down- "*" Button
	 Button .up.|> ButtonHandler
	 Button <|-left- StartButton
	 Button <|-right- PauseButton
	 Button <|-left- ResumeButton
	 Button <|-- ResetButton
	 Button <|-- SaveDataButton
	 Button <|-- SaveRepresentationButton
	 Button <|-- SaveConfiguration
	 Button <|-- LoadConfiguration
	 Button <|-- NewConfiguration
	 Button <|-right- UndoButton
	 Button <|-right- RedoButton
	 
	 
	}
	
namespace Exception {

	class ExceptionWindow {
	-title: String
	-description: String
	+popUp(): void
	+close(): void
	}

	class BuildingBlockExceptionWindow {
	-id: String
	+popUp(): void
	+changeBlockColor(color: String): void
	}

	class ConnectionExceptionWindow {
	-channelInId: int
	-channelOutId: int
	+popUp(): void
	+changeWireColor(color: String): void
	}

	class GeneralExceptionWindow {
	 +popUp(): void
	}
	 GUI.MainWindow "1" -- ExceptionWindow
	 ExceptionWindow <|-- BuildingBlockExceptionWindow
	 ExceptionWindow <|-- ConnectionExceptionWindow
	 ExceptionWindow <|-- GeneralExceptionWindow
}

namespace HelpAndOption {

 class OptionsWindow {
 	+ changeColorScheme(newColorScheme: String): void
 	+ changeFontSize(newSize: int): void
}

 class HelpWindow {
 	- description: String
 	+ openDescription(): void

 }
	 GUI.MainWindow -down-o "1" HelpWindow
	 GUI.MainWindow -down-o "1" OptionsWindow

}
}
namespace FacadeModelView {

class PickUpPointModelView {
 + getDataInterface(): DataInterface
 + getExceptionInterface(): ExceptionInterface
 + getViewModelInterface(): ViewModelInterface
 }

 interface ViewModelInterface {
 + update(): void
 }

 interface DataInterface {
 + pushDataForVisualisation(...): void
 + pushGraphicalVisualisation(...):void
 }

 interface ExceptionInterface {
 + throwFatalException(title: String, description: String): void
 + throwBuildingBlockException(id: String, title: String, description: String): void
 + throwConnectionException(id: int, title: String, description: String): void
 }
 
 PickUpPointModelView -up-> ViewModelInterface
 PickUpPointModelView -up-> DataInterface
 PickUpPointModelView -up-> ExceptionInterface

}

namespace FacadeControllerView {

interface "ViewControllerlnterface" {
  + getViewModel(): List: <BuildingBlockViews>
  + setViewModel(list: <BuildingBlockViews>): boolean
 }
}



@enduml
