@startuml
namespace Cache {

class MStreamListener {
	+ receiveMDataSet(channelId: String, timeStamp: long, value: double): void
	+ connectionTerminated(): void
}


class MRunTiming {
	+ MRunTiming(initData: MRunInfo, listenerAtModel: MRunListener )
	- addBufferForOneSensorInChannel(SensorId: String)
	- addAction(action: CheckAndNotifyAction): void
	..
	+ run(): void
	- setCurrentTime(): void
	- checkActions(): void
	..
	+ startRepeatedTimer(): void
	+ stopRepeatedTimer(): void
}

class Timer {
	-period: long
	+schedule(timerTask: TimerTask, period: long)
	+cancel(): boolean
}

class Cache{
	+ addBufferForOneSensorInChannel(SensorId: String)
	+ receiveMDataSet(channelId: String, timeStamp: long, value: double): void
	+ isCompletePackageSetAvailable(from: long, to: long): boolean
	+ pollCompletePackageSet(from: long, to: long):  IdValuePair[]
}

class BufferForOneSensorInChannel {
	-sensorInChannelId: String
	-buffer: Queue<TimestampValuePair>
	+getInChannelId(): String
	+addPacket(timeStamp: long, value: double)
	+getAllPacketsDuringTimespan(from: long, to: long): double[]
}

class TimestampValuePair	{
	-value: double
	-timeStamp: long
	+TimestampValuePair(value: double, timeStamp: long)
	+getValue(): double
	+getTimeSpamp(): long
}
	
class ConnectionTerminatedAction {
	-
	+ connectionTerminated(): void
	+ checkAndNotify(mRunForward: MRunForward)
}

class TimeoutAction {
	-lastCompleteDatasetTimestamp: long
	+checkAndNotify(mRunForward: MRunForward)
}

class ErrorCodeAction {
	+checkAndNotify(mRunForward: MRunForward)
}

class DataSetCompleteAction {
	+checkAndNotify(mRunForward: MRunForward)
}

MStreamListener --> ConnectionTerminatedAction
MStreamListener --> Cache
ConnectionTerminatedAction .up.|> CheckAndNotifyAction
TimeoutAction .up.|> CheckAndNotifyAction
ErrorCodeAction .up.|> CheckAndNotifyAction
DataSetCompleteAction .up.|> CheckAndNotifyAction

MRunTiming -right-> Timer
MRunTiming .right.|> TimerTask
Timer -down-> "1" TimerTask
MRunTiming --> Cache
Cache --> "*" BufferForOneSensorInChannel
BufferForOneSensorInChannel .right.> TimestampValuePair
MRunTiming --> "*" CheckAndNotifyAction

DataSetCompleteAction --> "*" Cache

MRunTiming --> "*" IMRunListener
MRunTiming ..> IMRunInfo

interface CheckAndNotifyAction {
	+checkAndNotify(mRunForward: MRunForward)
}

interface IMRunListener {
	+justWaiting():  void
	+indicateError(inChannelId: String, errorCode: double)
	+indicateTimeout(): void
	+indicateConnectionTerminated(): void
	+dispatchCompletePacketSet(completePacketSet: EnhancedValuePacket[])
}

interface IMRunInfo {
	+getAllInChannelIds(): String[]
	+getErrorCodes(inChannelId: String): double[]
	+getTimeoutOption(): long
}

interface TimerTask {
	+run(): void
}

IMRunListener <|.. Model.MRunReaction
IMRunInfo <|.. Model.MRunInfo

}
@enduml
