@startuml



class "MeasurementRun" as MR{
	state: String

}

class "MeasurementConfiguration" as MC{
	to do

}



class "PrototypCollection" as PC{
	to do
}


abstract class "BuildingBlock" as BB
{

-id: int
	-name: String
	-listOfChannels: <<Channel>>
	+setId()
	+ {abstract} establishConnection(Integer ownSourceChannelId, Integer targetChannelId)
	+ {abstract} getDataProvider(Integer channelId): DataProvider

}



namespace TransformationLogic {
	abstract class Transformation
	CustomizedTransformation -up-|> Transformation
	PredefinedTransformation -up-|> Transformation
	LinearMapping -up-|> PredefinedTransformation
	DependendOutputTransformation -up-|> PredefinedTransformation
}


BB <|- TransformationLogic.Transformation
'----------------------------------------------------------------------------------------
'Note: The manager aspect of this diagramm can be found, in more detail, at another place.
'It stands here for a complete overview
'----------------------------------------------------------------------------------------
package kit.edu.freejdaq.configurationBlockManager {
	abstract class ConfigurationBlockManager{
		listOfBlocks : ConfigurationBlock[]
		{abstract}+add(cb: ConfigurationBlock): boolean
		+remove(cb: ConfigurationBlock): boolean
		+showAllBocks(cb: ConfigurationBlock): boolean
	}
	
	class "RepresentationManager" as RM {
	

	}

	class "SensorManager" as SM {

	}
	
	ConfigurationBlockManager <|-down- TransformationManager
}

TransformationManager "1" *-down- "n" TransformationLogic.Transformation


namespace RepresentationLogic {

abstract class "Representation" as AR{

	state : String

	updateInterval : float

	

	{abstract} saveRepresentationAsFile(Path path):boolean
	{abstract} run()
	{abstract} stop()
	{abstract} resume()
	{abstract} reset()
	{abstract} delete()

	{abstract} establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean

}
class "Trace" as T{

	type: String
	setType(String type): boolean

}
class "TableRespresentation" as TR {


	saveRepresentationAsFile(Path path): boolean
	run()
	stop()
	resume()
	reset()
	delete()

	setSize(Integer xSize, Integer ySize): boolean
	establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
}


class "XYRepresentation" as XYR {
	title: String
	xLabel: String
	yLabel: String
	hasToolbar: boolean

saveRepresentationAsFile(Path path):boolean
	run()
	stop()
	resume()
	reset()
	delete()
	setSize(Integer xSize, Integer ySize): boolean
	establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean


}

note right of RepresentationLogic.XYR
  use eclipse nebula 
  for display
end note


class "Channel X vs Time" as XvT {

}

class "Channel X vs Channel Y"  as XvY{

	setChannelX(DataProvider dataProvider): boolean
	setChannelY(DataProvider dataProvider): boolean
}

	class "N Channels vs Time"  as NvT{
	numberOfChannels: Integer
}
XYR -up-|> AR
XvT -up-|> XYR
XvY -up-|> XYR
NvT -up-|> XYR
TR   -down-|> AR


T "1 ..* "--o " 1 " XYR

note top of  T
  examples for type: 
  bar, area, line
end note


}

namespace SensorLogic {

	abstract class "Sensor" as AS{
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
		
		}
	 class "AnalogDigitalConverter" as ADC {
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
	}
	
	class "ADS1115" as ads1115 {

	}
	
	ADC -up-|> AS
	ads1115 -up-|> ADC
	
	
	class "Current/Power" as CP {
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
	}
	
	class "INA219" as ina219 {

	}
	
	CP -up-|> AS
	ina219 -up-|> CP
		
	class "SpectralSensor" as SpecSens {
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
	}
	
	class "AS7262" as as7262 {

	}
	
	SpecSens -up-|> AS
	as7262 -up-|> SpecSens
	
}






class "Channel" as C {
	type: String
	channelId: Integer
	connectionPartnerId: Integer
	dataProvider: DataProvider

	setConnectionPartnerId(String id): boolean

}


class "ChannelManager" as CL {
	String: numberOfElements
	getChannel(Integer id): Channel
	setChannel(Integer id): boolean
	addChannel(Channel channel): boolean
	removeChannel(id): boolean
}




class "Value" as DP {

	dataName: String
	dataUnit: String


}

interface "IValueHandler" as IDP {

	processValue():
	getDataProvider(Integer channelId): DataProvider

}


class "HelpMessage" as HM{
	- messageFileName : String
	+ HelpMessage(msgFile : String)
	+ displayMessage() : void
}
note right of HM : "messageFileName" leads to [html/markdown/?] \nfile containing message text, \nwhich can be displayed by the application \n(e.g. in swt browser widget)

BB "*" --> "1" HM : < provides help/information about

note right of IDP
  interface to provide 
  Data to a channel
end note


note right of C
  first part of channelId is 
  the corresponding buildingBlockId
end note











BB <|-- SensorLogic.AS
BB <|-- RepresentationLogic.AR


RM "1" *-- "n" RepresentationLogic.AR



CL "1" -- "1" BB

C --|> IDP
CL "1" *-- "*" IDP
IDP -- DP

ConfigurationBlockManager <|-- RM
ConfigurationBlockManager <|-- SM
SM "1" *-- "*" SensorLogic.AS
MC "1" -- "*" MR
PC "1" -- "*" BB
MC "1" -- "*" BB


@enduml