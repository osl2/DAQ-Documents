@startuml



class "MeasurementRun" as MR{
	-state: String
	+start(): boolean
	+pause(): boolean
	+resume(): boolean
	+reset(): boolean
	+setUpdateRate(MeasurementConfiguration config): boolean

}

class "MeasurementConfiguration" as MC{
	-updateRate: float
	-listOfAllChannels: <Channel>
	-listOfAllConnections: (Integer sourceId, Integer targetId)
   -configurationAdjacencyList: configuration[]
    +addBlock(BuildingBlock block): boolean 
    +removeBlock(Integer blockId): boolean
    +returnMeasurementConfiguration(): MeasurementConfiguration
	+connectChannels(Integer sourceId, Integer targetId)
}



'----------------------------------------------------------------------------------------
'PrototypCollection: List of all predefined and custom BuildingBlocks
'----------------------------------------------------------------------------------------

class "PrototypCollection" as PC{
	 +returnCloneOfBlock(BuildingBlock: block)
}


abstract class "BuildingBlock" as BB
{

-id: int
	-name: String
	-listOfChannels: <<Channel>>
	+setId()
	+ {abstract} processValue()
	+ {abstract} establishConnection(Integer ownSourceChannelId, Integer targetChannelId)
	

}



namespace TransformationLogic {
	abstract class Transformation
	CustomizedTransformation -up-|> Transformation
	PredefinedTransformation -up-|> Transformation
	LinearMapping -up-|> PredefinedTransformation
	DependendOutputTransformation -up-|> PredefinedTransformation
}


BB <|- TransformationLogic.Transformation
'----------------------------------------------------------------------------------------
'Note: The manager aspect of this diagramm can be found, in more detail, at another place.
'It stands here for a complete overview
'----------------------------------------------------------------------------------------
package kit.edu.freejdaq.configurationBlockManager {
	abstract class ConfigurationBlockManager{
		listOfBlocks : ConfigurationBlock[]
		{abstract}+add(BuildingBlock block): boolean
		{abstract}+remove(BuildingBlock block): boolean
		{abstract}+showAllBocks(BuildingBlock block): boolean
	}
	
	class "RepresentationManager" as RM {
		

	}

	class "SensorManager" as SM {

	}
	
	ConfigurationBlockManager <|-down- TransformationManager
}

TransformationManager "1" *-down- "n" TransformationLogic.Transformation


namespace RepresentationLogic {

abstract class "Representation" as AR{

	{abstract} processValue()
	{abstract} establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean

}

class "TableRespresentation" as TR {
	processValue()
    establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
}


class "XYRepresentation" as XYR {
	processValue()
	establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean


}

note right of RepresentationLogic.XYR
  use eclipse nebula 
  for display
end note


class "ChannelXvsTime" as XvT {
	processValue()
}

class "ChannelXvsChannelY"  as XvY{
	processValue()
	
}
	
	class "NChannelvsTime"  as NvT{
	processValue()
}
XYR -up-|> AR
XvT -up-|> XYR
XvY -up-|> XYR
NvT -up-|> XYR
TR   -down-|> AR


}

namespace SensorLogic {

	abstract class "Sensor" as AS{
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
		
		}
	 class "AnalogDigitalConverter" as ADC {
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
	}
	
	class "ADS1115" as ads1115 {

	}
	
	ADC -up-|> AS
	ads1115 -up-|> ADC
	
	
	class "Current/Power" as CP {
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
	}
	
	class "INA219" as ina219 {

	}
	
	CP -up-|> AS
	ina219 -up-|> CP
		
	class "SpectralSensor" as SpecSens {
		establishConnection(Integer channelIdOfPartner, Integer ownChannelId): boolean
	}
	
	class "AS7262" as as7262 {

	}
	
	SpecSens -up-|> AS
	as7262 -up-|> SpecSens
	
}


class "Channel" as C {
	-type: String
	-channelId: Integer
	-connectionPartnerId: Integer
	+processValue()
	+setConnectionPartner(Integer id): boolean

}


class "ChannelManager" as CM {
	-numberOfElements: Integer
	+getChannel(Integer id): Channel
	+setChannel(Integer id): boolean
	+addChannel(Channel channel): boolean
	+removeChannel(Integer id): boolean
}



interface "IValueHandler" as VH {

	processValue()
}


class "HelpMessage" as HM{
	- messageFileName : String
	+ HelpMessage(msgFile : String)
	+ displayMessage() : void
}
note right of HM : "messageFileName" leads to [html/markdown/?] \nfile containing message text, \nwhich can be displayed by the application \n(e.g. in swt browser widget)

BB "*" --> "1" HM : < provides help/information about

note right of VH
  interface to provide 
  Data to a channel
end note


note top of C
  first part of channelId is 
  the corresponding buildingBlockId
end note


BB <|-- SensorLogic.AS
BB <|-- RepresentationLogic.AR


RM "1" *-- "n" RepresentationLogic.AR



CM "1" -- "1" BB

C ..|> VH

CM "1" o-- "1..*" C

ConfigurationBlockManager <|-- RM
ConfigurationBlockManager <|-- SM
SM "1" *-- "*" SensorLogic.AS
MC "1" -- "*" MR
PC "1" -- "*" BB
MC "1" -- "*" BB


@enduml